{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "/Users/juancruzleyba/Desktop/golftimeapp/app/root.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/$eventId.user.$userId.tsx", "../app/components/Foursome.tsx", "../app/components/Leaderboard.tsx", "../app/components/PlayersSelection.tsx", "../app/components/Sidebar.tsx", "../app/hooks.tsx", "../app/services/auth.server.tsx", "../app/entities/User.ts", "../app/repositories/table.ts", "../app/services/session.server.tsx", "../app/entities/Bet.ts", "../app/services/events.server.tsx", "../app/services/email.server.tsx", "../app/services/imap.server.tsx", "../app/services/bet.server.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/forgot-password.tsx", "../app/services/user.server.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/check-teetimes.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/reset-password.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/index.tsx", "../app/components/EventCardItem.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/groups/index.tsx", "../app/entities/Group.ts", "../app/services/groups.server.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/bulk-update.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/groups/$id.tsx", "../app/components/MiniTable.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/sign-up.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/logout.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/index.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "// entry.server.tsx\nimport { renderToString } from 'react-dom/server'\nimport { CacheProvider } from '@emotion/react'\nimport createEmotionServer from '@emotion/server/create-instance'\nimport { RemixServer } from '@remix-run/react'\nimport type { EntryContext } from '@remix-run/node' // Depends on the runtime you choose\n\nimport { ServerStyleContext } from './context'\nimport createEmotionCache from './createEmotionCache'\n\nconst AWS = require(\"aws-sdk\");\nAWS.config.update({\n  region: \"us-east-1\",\n  accessKeyId: process.env.DYNAMODB_ACCESS_KEY_ID,\n  secretAccessKey: process.env.DYNAMODB_SECRET_ACCESS_KEY,\n});\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  const cache = createEmotionCache()\n  const { extractCriticalToChunks } = createEmotionServer(cache)\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  const chunks = extractCriticalToChunks(html)\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}", "// context.tsx\nimport { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n", "// createEmotionCache.ts\nimport createCache from \"@emotion/cache\";\n\nexport default function createEmotionCache() {\n  return createCache({ key: \"css\" });\n}\n", "// root.tsx\nimport React, { useContext, useEffect } from \"react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport type { MetaFunction, LinksFunction } from \"@remix-run/node\"; // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from \"./context\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Golftime App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport let links: LinksFunction = () => {\n  return [\n    {\n      rel: \"icon\",\n      href: \"/favicon.png\",\n      type: \"image/png\",\n    },\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    { rel: \"preconnect\", href: \"https://fonts.gstaticom\" },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\",\n    },\n  ];\n};\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    return (\n      <html lang=\"en\">\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(\" \")}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  );\n}\n", "import { Box, Heading, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useParams, useSubmit } from \"@remix-run/react\";\nimport keyBy from \"lodash.keyby\";\nimport { useCallback, useState } from \"react\";\nimport type { FoursomeType } from \"~/components/Foursome\";\nimport { Foursome } from \"~/components/Foursome\";\nimport { Leaderboard } from \"~/components/Leaderboard\";\nimport { PlayerSelection } from \"~/components/PlayersSelection\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport { useSearchBar } from \"~/hooks\";\nimport authenticator from \"~/services/auth.server\";\nimport { currentBet, saveBet } from \"~/services/bet.server\";\nimport EventManager from \"~/services/events.server\";\nimport type { Competitor, Tournament } from \"~/types\";\n\ninterface LoaderData {\n  tournament: Tournament;\n  liveBet: FoursomeType | null;\n}\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  const tournamentId = params.eventId;\n  const userId = params.userId;\n\n  if (!tournamentId || !userId) {\n    return null;\n  }\n\n  const [tournament, liveBet] = await Promise.all([\n    EventManager.fetchEventById(tournamentId),\n    currentBet(tournamentId, userId),\n  ]);\n\n  const positionsByPlayer = keyBy(tournament.competitors, \"id\");\n\n  return json<LoaderData>({\n    tournament: {\n      ...tournament,\n      competitors: tournament.competitors?.sort(\n        (a, b) =>\n          parseInt(a.pos.replace(\"T\", \"\")) - parseInt(b.pos.replace(\"T\", \"\"))\n      ),\n    },\n    liveBet: (liveBet?.players || []).reduce((acc: any, pl: any) => {\n      //@ts-ignore\n      acc[pl.id] = positionsByPlayer[pl.id];\n      return acc;\n    }, {}),\n  });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const data = await request.formData();\n  const players = (await data.get(\"players\")) as string;\n  const userId = (await data.get(\"userId\")) as string;\n  const eventId = (await data.get(\"eventId\")) as string;\n\n  await saveBet(eventId, userId, JSON.parse(players));\n\n  return null;\n};\n\nexport default function SingleEvent() {\n  const { tournament, liveBet } = useLoaderData<LoaderData>();\n  const [foursome, setFoursome] = useState<FoursomeType | {}>(liveBet || {});\n  const [SearchBar, competitors, resetCompetitors] = useSearchBar<Competitor>(\n    tournament.competitors,\n    (e) => (comp) =>\n      comp.name.toLowerCase().includes(e.target.value.toLowerCase()),\n    true\n  );\n  const submit = useSubmit();\n  const params = useParams();\n\n  const [course] = Object.keys(tournament.courses);\n\n  const saveDate = useCallback(\n    (foursome: FoursomeType) => {\n      const formData = new FormData();\n\n      formData.append(\"players\", JSON.stringify(Object.values(foursome)));\n      formData.append(\"eventId\", tournament.id);\n      formData.append(\"userId\", params.userId || \"\");\n\n      setFoursome(foursome);\n      resetCompetitors();\n      submit(formData, {\n        method: \"post\",\n        action: `/events/${tournament.id}/user/${params.userId}`,\n      });\n    },\n    [setFoursome, resetCompetitors, submit, tournament, params.userId]\n  );\n\n  return (\n    <SimpleSidebar>\n      <Box\n        w={\"full\"}\n        bg={useColorModeValue(\"white\", \"gray.900\")}\n        boxShadow={\"2xl\"}\n        rounded={\"lg\"}\n        p={6}\n        my={2}\n      >\n        <Foursome foursome={foursome} />\n      </Box>\n\n      <Box\n        w={\"full\"}\n        bg={useColorModeValue(\"white\", \"gray.900\")}\n        boxShadow={\"2xl\"}\n        rounded={\"lg\"}\n        p={6}\n      >\n        <Heading marginY={5}>{tournament.name}</Heading>\n        {tournament?.courses[course].nm && (\n          <Heading variant={\"h3\"} fontSize=\"md\" marginY={5}>\n            {tournament?.courses[course].nm}\n          </Heading>\n        )}\n        {tournament.status !== \"pre\" && tournament.competitors ? (\n          <Leaderboard tournament={tournament} />\n        ) : tournament.competitors ? (\n          <Form>\n            <Box marginY=\"5\">\n              <SearchBar />\n            </Box>\n            <PlayerSelection\n              competitors={competitors}\n              onSelect={saveDate}\n              selection={foursome}\n            />\n          </Form>\n        ) : (\n          <Text>Torneo sin jugadores</Text>\n        )}\n      </Box>\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Avatar,\n  Badge,\n  Box,\n  Flex,\n  Heading,\n  SimpleGrid,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { Competitor } from \"~/types\";\n\nexport type FoursomeType = Record<\n  string,\n  Pick<Competitor, \"img\" | \"name\" | \"id\"> & { pos?: string }\n>;\n\nexport const Foursome = ({ foursome }: { foursome: FoursomeType }) => {\n  const badgeBg = useColorModeValue(\"gray.50\", \"gray.800\");\n\n  const points = Object.keys(foursome).reduce((acc, key) => {\n    const pos =\n      (foursome[key].pos || \"\").replace(\"T\", \"\").replace(\"-\", \"0\") || \"0\";\n\n    acc += parseInt(pos) ? 100 / parseInt(pos) : 0;\n    return acc;\n  }, 0);\n\n  return (\n    <>\n      <Heading fontSize={20} marginBottom=\"10\">\n        Mi Foursome\n      </Heading>\n      {isEmpty(foursome) ? (\n        <Flex\n          flexDir=\"column\"\n          justifyContent=\"space-around\"\n          alignItems=\"center\"\n          minH={120}\n        >\n          <Avatar src={\"\"} size=\"lg\" />\n          <Text ml=\"2\" fontWeight={\"bold\"} textAlign=\"center\">\n            Elija jugador\n          </Text>\n        </Flex>\n      ) : (\n        <SimpleGrid spacing=\"40px\" columns={4}>\n          {Object.keys(foursome).map((id) => (\n            <Flex\n              flexDir=\"column\"\n              key={id}\n              justifyContent=\"space-around\"\n              alignItems=\"center\"\n              minH={120}\n            >\n              <Avatar src={foursome[id].img} size=\"lg\" />\n              <Text ml=\"2\" fontWeight={\"bold\"} textAlign=\"center\">\n                {foursome[id].name}\n              </Text>\n              <Text ml=\"2\" fontWeight={\"bold\"} textAlign=\"center\">\n                {foursome[id].pos}\n              </Text>\n            </Flex>\n          ))}\n        </SimpleGrid>\n      )}\n      <Box textAlign=\"center\">\n        <Badge\n          fontSize=\"md\"\n          px={4}\n          py={1}\n          bg={badgeBg}\n          fontWeight={\"600\"}\n          marginY=\"4\"\n          alignSelf={\"center\"}\n        >\n          Puntos: {points.toFixed(2)}\n        </Badge>\n      </Box>\n    </>\n  );\n};\n\nfunction isEmpty(\n  obj: Record<string, Pick<Competitor, \"img\" | \"name\">>\n): boolean {\n  for (const _key in obj) {\n    return false;\n  }\n  return true;\n}\n", "import {\n  TableContainer,\n  Table,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  Flex,\n  Avatar,\n  Text,\n} from \"@chakra-ui/react\";\nimport type { Tournament } from \"~/types\";\n\nexport const Leaderboard = ({ tournament }: { tournament: Tournament }) => {\n  return (\n    <TableContainer>\n      <Table variant=\"simple\">\n        <Thead>\n          <Tr>\n            <Th>Posici\u00F3n</Th>\n            <Th>Jugador</Th>\n            <Th>Total</Th>\n            <Th>Score</Th>\n            <Th>Hoyo</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {tournament.competitors.map((competitor) => (\n            <Tr key={competitor.id}>\n              <Td>{competitor.pos}</Td>\n              <Td>\n                <Flex alignItems={\"center\"}>\n                  <Avatar src={competitor.img} />\n                  <Text ml=\"2\" fontWeight={\"bold\"}>\n                    {competitor.name}\n                  </Text>\n                </Flex>\n              </Td>\n              <Td>{competitor.toPar}</Td>\n              <Td>{competitor.today}</Td>\n              <Td>{competitor.thru}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </TableContainer>\n  );\n};\n", "import { Avatar, Button, Flex, Icon, SimpleGrid, Text } from \"@chakra-ui/react\";\nimport { useCallback } from \"react\";\nimport { IoAddCircle, IoRemoveCircle } from \"react-icons/io5\";\nimport type { Competitor } from \"~/types\";\nimport type { FoursomeType } from \"./Foursome\";\n\nexport const PlayerSelection = ({\n  onSelect,\n  competitors,\n  selection,\n}: {\n  onSelect: (player: FoursomeType) => void;\n  competitors: Competitor[];\n  selection: FoursomeType;\n}) => {\n  const addPlayer = useCallback(\n    (player: Competitor) => {\n      onSelect({\n        ...selection,\n        [player.id]: {\n          img: player.img,\n          id: player.id,\n          name: player.name,\n          pos: player.pos,\n        },\n      });\n    },\n    [onSelect, selection]\n  );\n\n  const removePlayer = useCallback(\n    (player: Competitor) => {\n      const { [player.id]: removed, ...rest } = selection;\n      onSelect(rest);\n    },\n    [onSelect, selection]\n  );\n\n  return (\n    <SimpleGrid minChildWidth=\"120px\" spacing=\"40px\">\n      {competitors.map((player: Competitor) => {\n        return (\n          <Flex\n            flexDir=\"column\"\n            key={player.id}\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            minH={180}\n          >\n            <Avatar src={player.img} size=\"lg\" />\n            <Text ml=\"2\" fontWeight={\"bold\"} textAlign=\"center\">\n              {player.name}\n            </Text>\n            {selection[player.id] ? (\n              <Button\n                onClick={() => removePlayer(player)}\n                leftIcon={<Icon as={IoRemoveCircle} />}\n                colorScheme=\"red\"\n              >\n                Borrar\n              </Button>\n            ) : (\n              <Button\n                onClick={() => addPlayer(player)}\n                leftIcon={<Icon as={IoAddCircle} />}\n                colorScheme=\"green\"\n                disabled={Object.keys(selection).length === 4}\n              >\n                Agregar\n              </Button>\n            )}\n          </Flex>\n        );\n      })}\n    </SimpleGrid>\n  );\n};\n", "import type { BoxProps, FlexProps } from \"@chakra-ui/react\";\nimport {\n  Box,\n  Button,\n  CloseButton,\n  Drawer,\n  DrawerContent,\n  Flex,\n  Icon,\n  IconButton,\n  Image,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { Form, Link } from \"@remix-run/react\";\nimport type { ReactNode, ReactText } from \"react\";\nimport React from \"react\";\nimport type { IconType } from \"react-icons\";\nimport { FiMenu } from \"react-icons/fi\";\nimport {\n  IoCalendar,\n  IoHome,\n  IoPeopleCircleOutline,\n  IoHelpCircleOutline,\n} from \"react-icons/io5\";\nimport Logo from \"../assets/golftime.svg\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  href: string;\n}\nconst LinkItems: Array<LinkItemProps> = [\n  { name: \"Inicio\", icon: IoHome, href: \"/\" },\n  { name: \"Torneos\", icon: IoCalendar, href: \"/events\" },\n  { name: \"Grupos\", icon: IoPeopleCircleOutline, href: \"/groups\" },\n  { name: \"Como jugar\", icon: IoHelpCircleOutline, href: \"#\" },\n];\n\nexport default function SimpleSidebar({ children }: { children: ReactNode }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue(\"gray.100\", \"gray.900\")}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: \"none\", md: \"block\" }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\"\n      >\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav display={{ base: \"flex\", md: \"none\" }} onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}\n\ninterface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\n\nconst SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      w={{ base: \"full\", md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      textAlign={\"center\"}\n      {...rest}\n    >\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Image src={Logo} maxW={175} marginX={5} />\n\n        <CloseButton display={{ base: \"flex\", md: \"none\" }} onClick={onClose} />\n      </Flex>\n\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} href={link.href}>\n          {link.name}\n        </NavItem>\n      ))}\n      <Box m={5}>\n        <Form method=\"post\" action=\"/logout\">\n          <Button type=\"submit\">Cerrar Sesi\u00F3n</Button>\n        </Form>\n      </Box>\n    </Box>\n  );\n};\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  children: ReactText;\n  href: string;\n}\nconst NavItem = ({ icon, children, href, ...rest }: NavItemProps) => {\n  return (\n    <Link to={href} style={{ textDecoration: \"none\" }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: \"green.400\",\n          color: \"white\",\n        }}\n        {...rest}\n      >\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: \"white\",\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </Link>\n  );\n};\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\nconst MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 24 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      justifyContent=\"flex-start\"\n      {...rest}\n    >\n      <IconButton\n        variant=\"outline\"\n        onClick={onOpen}\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n\n      <Image src={Logo} maxW={175} marginX={5} />\n    </Flex>\n  );\n};\n", "import { Input, InputGroup, InputLeftElement } from \"@chakra-ui/react\";\nimport React, { useCallback, useState } from \"react\";\nimport { IoSearch } from \"react-icons/io5\";\n\ninterface SearchBarProps {\n  variant?: \"filled\" | \"outline\";\n}\n\nexport function useSearchBar<P>(\n  list: P[],\n  predicate: (e: React.ChangeEvent<HTMLInputElement>) => (item: P) => boolean,\n  initialize?: boolean\n): [(props: SearchBarProps) => JSX.Element, P[], () => void] {\n  const [data, setData] = useState<P[]>(initialize ? list : []);\n  const [value, setValue] = useState(\"\");\n\n  const filter = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.value) {\n        setData(list.filter(predicate(e)));\n      } else {\n        setData(initialize ? list : []);\n      }\n    },\n    [setData, initialize, list, predicate]\n  );\n\n  const reset = useCallback(() => {\n    setValue(\"\");\n    setData(initialize ? list : []);\n  }, [setData, list, initialize]);\n\n  const Component = ({ variant = \"filled\" }) => (\n    <InputGroup maxW={640} margin=\"auto\">\n      <InputLeftElement pointerEvents=\"none\" children={<IoSearch />} />\n      <Input\n        autoFocus\n        variant={variant}\n        bg={\"white\"}\n        onChange={(e) => {\n          filter(e);\n          setValue(e.target.value);\n        }}\n        value={value}\n        placeholder=\"Buscar\"\n      />\n    </InputGroup>\n  );\n\n  return [Component, data, reset];\n}\n", "import bcrypt from \"bcrypt\";\nimport { Authenticator, AuthorizationError } from \"remix-auth\";\nimport { FormStrategy } from \"remix-auth-form\";\nimport { UserEntity } from \"~/entities/User\";\nimport type { User } from \"~/types\";\nimport { sessionStorage } from \"./session.server\";\n\n// Create an instance of the authenticator, pass a Type, User,  with what\n// strategies will return and will store in the session\nconst authenticator = new Authenticator<User | null>(sessionStorage, {\n  sessionKey: \"sessionKey\", // keep in sync\n  sessionErrorKey: \"sessionErrorKey\", // keep in sync\n});\n\nauthenticator.use(\n  new FormStrategy(async (req) => {\n    let email = req.form.get(\"email\") as string;\n    let password = req.form.get(\"password\") as string;\n\n    if (!email || email?.length === 0)\n      throw new AuthorizationError(\"Bad Credentials: Email is required\");\n    if (typeof email !== \"string\")\n      throw new AuthorizationError(\"Bad Credentials: Email must be a string\");\n\n    if (!password || password?.length === 0)\n      throw new AuthorizationError(\"Bad Credentials: Password is required\");\n    if (typeof password !== \"string\")\n      throw new AuthorizationError(\n        \"Bad Credentials: Password must be a string\"\n      );\n\n    const { Item: user } = await UserEntity.get({ id: email, sk: email });\n\n    if (user) {\n      const passwordMatch = await bcrypt.compare(password, user.password);\n\n      if (!passwordMatch) {\n        throw new AuthorizationError(\"Usuario o contrase\u00F1a incorrectos\");\n      }\n\n      return {\n        id: user.id,\n        firstName: user.firstname,\n        lastName: user.lastname,\n        email: user.email,\n        legacyId: user.legacyId,\n      };\n    } else {\n      throw new AuthorizationError(\"Usuario o contrase\u00F1a incorrectos\");\n    }\n  })\n);\n\nexport default authenticator;\n", "import { Entity } from \"dynamodb-toolbox\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const UserEntity = new Entity({\n  name: \"User\",\n  attributes: {\n    id: { partitionKey: true },\n    sk: { hidden: true, sortKey: true },\n    firstName: { type: \"string\" },\n    lastName: { type: \"string\" },\n    email: { type: \"string\" },\n    points: { type: \"number\" },\n    lastUpdatedEvent: { type: \"string\" },\n    password: { type: \"string\" },\n    verified: { type: \"boolean\" },\n    createdAt: { type: \"string\" },\n    token: { type: \"string\" },\n    gsi1pk: { type: \"string\" },\n    legacyId: { type: \"string\" },\n  },\n\n  // Assign it to our table\n  table: MonoTable,\n});\n", "import { Table } from \"dynamodb-toolbox\";\n\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nconst DocumentClient = new DynamoDB.DocumentClient();\n\n// Instantiate a table\nexport const MonoTable = new Table({\n  // Specify table name (used by DynamoDB)\n  name: \"golftime\",\n\n  // Define partition and sort keys\n  partitionKey: \"pk\",\n  sortKey: \"sk\",\n  autoExecute: true,\n  autoParse: true,\n\n  // Add the DocumentClient\n  DocumentClient,\n  indexes: {\n    \"gsi1pk-points-index\": { partitionKey: \"gsi1pk\", sortKey: \"points\" },\n    \"gsi2pk-pk-index\": { partitionKey: \"gsi2pk\", sortKey: \"pk\" },\n  },\n});\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"_session\", // use any name you want here\n    sameSite: \"lax\", // this helps with CSRF\n    path: \"/\", // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: [process.env.PRIVATE_KEY || \"somekey\"], // replace this with an actual secret\n    secure: process.env.NODE_ENV === \"production\", // enable this in prod only\n    expires: new Date(Date.now() + 3600000 * 24 * 14),\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { getSession, commitSession, destroySession } = sessionStorage;\n\n// define the user model\n", "import { Entity } from \"dynamodb-toolbox\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const BetEntity = new Entity({\n  name: \"Bet\",\n  attributes: {\n    id: { partitionKey: true },\n    sk: { sortKey: true },\n    result: { type: \"number\" },\n    players: { type: \"list\" },\n    season: { type: \"number\" },\n    createdAt: { type: \"string\" },\n  },\n\n  // Assign it to our table\n  table: MonoTable,\n});\n", "import type { Competitor, ScheduledEvent, Tournament } from \"~/types\";\n\nimport isThisWeek from \"date-fns/isThisWeek\";\nimport isSameWeek from \"date-fns/isSameWeek\";\nimport isAfter from \"date-fns/isAfter\";\nimport { sendTeeTimes } from \"./email.server\";\nimport { UserEntity } from \"~/entities/User\";\nimport { hasMailBeenSent } from \"./imap.server\";\n\n// Singleton to access events\nclass EventManager {\n  events: ScheduledEvent[];\n  constructor() {\n    this.events = [];\n  }\n\n  async getEvents(): Promise<ScheduledEvent[]> {\n    try {\n      if (this.events.length) return this.events;\n\n      const data = await fetch(`${process.env.EVENTS_ENDPOINT}`);\n\n      if (!data.ok) {\n        throw Error(\"Failed to fetch current tournament\");\n      }\n\n      const { events }: { events: ScheduledEvent[] } = await data.json();\n\n      this.events = events.reduce((memo: any[], event: any) => {\n        if (event?.link) {\n          const id = event?.link?.split(\"=\")[1];\n          const flag = event?.athlete?.flag?.replace(\n            \".com\",\n            \".com/combiner/i?img=\"\n          );\n\n          memo.push({\n            id,\n            ...event,\n            athlete: {\n              ...event.athlete,\n              flag,\n            },\n            location: event?.locations?.[0]?.venue?.fullName,\n          });\n        }\n\n        return memo;\n      }, []);\n    } catch (e) {\n      console.error(e);\n    }\n\n    return this.events;\n  }\n\n  async getActiveEvent(): Promise<ScheduledEvent | undefined | null> {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      return eventList?.find(\n        (item: any) =>\n          isThisWeek(new Date(item.startDate), { weekStartsOn: 2 }) &&\n          item.description !== \"Canceled\"\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getNextActiveEvent(): Promise<ScheduledEvent | undefined | null> {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      const event = eventList?.find(\n        (item: any) =>\n          item.status === \"pre\" &&\n          !isThisWeek(new Date(item.startDate), { weekStartsOn: 1 }) &&\n          isAfter(new Date(item.startDate), new Date()) &&\n          item.description !== \"Canceled\"\n      );\n      return event;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getLastActiveEvent() {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      const index = eventList?.findIndex((item: any) => item.status !== \"post\");\n      const current = eventList[index - 1];\n      const secondary = eventList[index - 2];\n      let match = false;\n      if (current && secondary) {\n        match = isSameWeek(\n          new Date(current.startDate),\n          new Date(secondary.startDate)\n        );\n      }\n\n      if (match) {\n        return current.isMaj ? current : secondary;\n      }\n\n      return current;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  fetchEventById: (id: string) => Promise<Tournament> = async (id) => {\n    const data = await fetch(`${process.env.LEADERBOARD_ENDPOINT}${id}`);\n\n    if (!data.ok) {\n      throw Error(\"Failed to fetch tournament\");\n    }\n\n    const { leaderboard } = await data.json();\n\n    return {\n      ...leaderboard,\n      competitors: leaderboard.competitors.map((comp: Competitor) => ({\n        ...comp,\n        img: `${comp?.img?.replace(\n          \".com\",\n          \".com/combiner/i?img=\"\n        )}&w=224&scale=crop&cquality=40`,\n      })),\n    } as Tournament;\n  };\n\n  fetchCurrentEvent: () => Promise<Tournament> = async () => {\n    const currentEvent = await this.getActiveEvent();\n\n    if (!currentEvent?.id) {\n      throw Error(\"Failed to fetch current tournament\");\n    }\n\n    return await this.fetchEventById(currentEvent.id);\n  };\n\n  async verifyTeeTimes() {\n    try {\n      const mailSent = await hasMailBeenSent();\n      const nextEvent = await this.getActiveEvent();\n      console.debug(\"Mail sent: \", mailSent);\n\n      if (!mailSent && nextEvent?.status === \"pre\") {\n        const next = await this.fetchEventById(nextEvent.id);\n        if (next?.competitors?.length) {\n          const { Items: rows } = await UserEntity.query(\"User#Current\");\n\n          await sendTeeTimes(\n            rows.map((row: { email: string }) => row.email),\n            nextEvent.id,\n            next.name\n          );\n        }\n      }\n\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n}\n\nexport default new EventManager();\n", "import nodemailer from \"nodemailer\";\n\nfunction transporter() {\n  const transporter = nodemailer.createTransport({\n    pool: true,\n    host: \"smtp.gmail.com\",\n    port: 465,\n    secure: true, // use SSL\n    auth: {\n      user: process.env.MAIL_USERNAME,\n      pass: process.env.MAIL_PASSWORD,\n    },\n  });\n\n  return transporter;\n}\nexport async function sendEmailVerification(email: string, token: string) {\n  const mailOptions = {\n    from: \"Golf Time <inscripciones.golftime@gmail.com>\",\n    to: email,\n    subject: \"\u00A1Bienvenido!\",\n    html: `<p>Gracias por registrarse en Golf Time. Para continuar, \n      por favor confirme su direcci\u00F3n de correo electr\u00F3nico haciendo click \n      <a href=\"${process.env.DOMAIN}/verify?token=${token}\">aqu\u00ED</a></p><p>El equipo de Golf Time</p>`,\n  };\n  return new Promise((resolve, reject) => {\n    transporter().sendMail(mailOptions, function (error: any, info: any) {\n      if (error) {\n        console.log(error);\n        reject(error);\n      } else {\n        // Enviamos el email\n        console.log(\"Email sent\");\n        resolve(\"Email sent\");\n      }\n    });\n  });\n}\n\nexport async function sendPassRecovery(email: string, token: string) {\n  const mailOptions = {\n    from: \"Golf Time <inscripciones.golftime@gmail.com>\",\n    to: email,\n    subject: \"Recuperaci\u00F3n de contrase\u00F1a\",\n    html: `<p>Para generar una nueva contrase\u00F1a por favor haga click <a href=\"${process.env.DOMAIN}/reset-password?token=${token}\">aqu\u00ED</a></p><p>El equipo de Golf Time</p>`,\n  };\n  return new Promise((resolve, reject) => {\n    // Enviamos el email\n    transporter().sendMail(mailOptions, function (error: any, info: any) {\n      if (error) {\n        console.log(error);\n        reject(error);\n      } else {\n        console.log(\"Email sent\");\n        resolve(\"Email sent\");\n      }\n    });\n  });\n}\n\nexport async function sendTeeTimes(\n  emails: string[],\n  eventId: string,\n  eventName: string\n) {\n  const eventFullName = eventName.toLowerCase().startsWith(\"the\")\n    ? eventName\n    : `el ${eventName}`;\n\n  const mailOptions = {\n    from: \"Golf Time <inscripciones.golftime@gmail.com>\",\n    to: \"inscripciones.golftime@gmail.com\",\n    bcc: emails.toString(),\n    subject: `Field disponible para ${eventFullName}!`,\n    html: `<p>Amigo golfista,</p><p>Ya se encuentra disponible el field de ${eventFullName} y pod\u00E9s elegir tus jugadores para este torneo haciendo click <a href=\"${process.env.DOMAIN}/events/${eventId}\">aqu\u00ED</a>.\n    </p><p>Buena suerte!</p><p>El Equipo de Golf Time</p>`,\n  };\n  return new Promise((resolve, reject) => {\n    // Enviamos el email\n    transporter().sendMail(mailOptions, function (error: any, info: any) {\n      if (error) {\n        console.log(error);\n        reject(error);\n      } else {\n        console.log(\"Email sent\");\n        resolve(\"Email sent\");\n      }\n    });\n  });\n}\n", "//@ts-ignore\nimport ImapClient from \"emailjs-imap-client\";\nimport isThisWeek from \"date-fns/isThisWeek\";\n\nvar client = new ImapClient(\"imap.gmail.com\", 993, {\n  auth: {\n    user: process.env.MAIL_USERNAME,\n    pass: process.env.MAIL_PASSWORD,\n  },\n  useSecureTransport: true,\n});\n\nexport async function hasMailBeenSent() {\n  try {\n    await client.connect();\n\n    const inbox = await client.selectMailbox(\"[Gmail]/Importantes\");\n\n    const [lastMessage] = await client.listMessages(\n      \"[Gmail]/Importantes\",\n      inbox.exists,\n      [\"envelope\"]\n    );\n\n    const date = lastMessage?.envelope?.date;\n    const hasBeenSent = isThisWeek(new Date(date), { weekStartsOn: 1 });\n    console.log(\"Last Message: \", lastMessage.envelope);\n\n    client.close();\n\n    return hasBeenSent;\n  } catch (e) {\n    console.error(\"Something went wrong getting last email\");\n  }\n\n  client.close();\n  return true;\n}\n", "import { UserEntity } from \"~/entities/User\";\nimport type { Competitor } from \"~/types\";\nimport { BetEntity } from \"../entities/Bet\";\nimport EventManager from \"./events.server\";\n\nexport type Bet = {\n  sk: string;\n  result: number;\n  players: {\n    id: string;\n    img: string;\n    name?: string;\n    position?: string;\n  }[];\n};\n\nexport const lastEventBets = async (eventId?: string) => {\n  if (!eventId) return null;\n\n  const { Items } = await BetEntity.query(eventId, {\n    reverse: true,\n  });\n\n  return Items.map(({ sk: userId, result }: Bet) => ({\n    userId,\n    result,\n  })).sort((a: Bet, b: Bet) => b.result - a.result);\n};\n\nexport const currentBet = async (eventId?: string, userId?: string) => {\n  if (!eventId || !userId) return null;\n\n  const { Items } = await BetEntity.query(eventId, {\n    eq: userId.toString(),\n  });\n\n  return Items[0] ?? null;\n};\n\nexport const saveBet = async (\n  eventId: string,\n  userId: string,\n  players: Bet[\"players\"]\n) => {\n  if (!eventId || !userId) return null;\n\n  const result = await BetEntity.put({\n    id: eventId,\n    sk: userId,\n    season: process.env.CURRENT_SEASON,\n    players,\n  });\n\n  return result;\n};\n\nexport const bulkUpdateResults = async () => {\n  const lastEvent = await EventManager.getLastActiveEvent();\n\n  if (!lastEvent?.id) {\n    return Error(\"Invalid request. Wrong eventId\");\n  }\n\n  const [{ Items: bets }, leaderboard] = await Promise.all([\n    BetEntity.query(lastEvent.id),\n    EventManager.fetchEventById(lastEvent.id),\n  ]);\n\n  if (!bets?.length || !leaderboard?.competitors) {\n    return Error(\"No bets found\");\n  }\n\n  const playersMap = mapPlayers(leaderboard.competitors);\n\n  let promiseArray: Promise<any>[] = [];\n\n  bets.forEach((bet: Bet) => {\n    const points = calcPoints(bet.players, playersMap);\n    promiseArray.push(\n      UserEntity.update(\n        {\n          id: bet.sk,\n          sk: \"User#Current\",\n          points: { $add: points },\n          lastUpdatedEvent: lastEvent.id,\n        },\n        {\n          conditions: {\n            attr: \"lastUpdatedEvent\",\n            ne: lastEvent.id,\n          },\n        }\n      )\n    );\n  });\n\n  await Promise.all(promiseArray).catch(() => {\n    console.log(\"Already updated\");\n  });\n};\n\nconst mapPlayers = (competitors: Competitor[]) => {\n  return competitors.reduce(\n    (acc: { [key: string]: number }, comp: Competitor) => {\n      const result =\n        comp.pos === \"-\" ? 0 : (1 / parseInt(comp.pos.replace(\"T\", \"\"))) * 100;\n      acc[comp.id] = result;\n\n      return acc;\n    },\n    {}\n  );\n};\n\nconst calcPoints = (\n  players: Bet[\"players\"],\n  map: { [key: string]: number }\n) => {\n  return players.reduce((acc: number, pl: { id: string }) => {\n    acc += map[pl.id];\n    return acc;\n  }, 0);\n};\n", "import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Image,\n  Input,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction} from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useTransition } from \"@remix-run/react\";\nimport jwt from \"jsonwebtoken\";\nimport authenticator from \"~/services/auth.server\";\nimport { sendPassRecovery } from \"~/services/email.server\";\nimport { sessionStorage } from \"~/services/session.server\";\nimport { updateUserToken } from \"~/services/user.server\";\nimport Logo from \"../assets/golftime.svg\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: \"/\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n  const error = session.get(\"sessionErrorKey\");\n\n  return json<any>({ error });\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  const formData = await request.formData();\n  const email = (await formData.get(\"email\")) as string;\n\n  if (!email) {\n    throw Error(\"Email invalid\");\n  }\n  const token = jwt.sign({ email }, process.env.PRIVATE_KEY || \"private\", {\n    expiresIn: \"1h\",\n  });\n  const user = await updateUserToken(email, token);\n  if (user) {\n    await sendPassRecovery(email, token);\n    return redirect(\"/\");\n  }\n  return null;\n};\n\nexport default function LoginPage() {\n  // if i got an error it will come back with the loader data\n  const { error } = useLoaderData();\n  const transition = useTransition();\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack\n        spacing={8}\n        mx={\"auto\"}\n        minW={{ sm: \"sm\", md: \"md\" }}\n        py={12}\n        px={6}\n      >\n        <Stack align={\"center\"}>\n          <Image src={Logo} maxW={275} marginX={5} />\n        </Stack>\n        <Stack align={\"center\"}>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            Ingrese su email para recuperar su contrase\u00F1a\n          </Text>\n        </Stack>\n        <Form method=\"post\">\n          <Box\n            rounded={\"lg\"}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            boxShadow={\"lg\"}\n            p={8}\n          >\n            {error?.message && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email</FormLabel>\n                <Input type=\"email\" name=\"email\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Button\n                  bg={\"green.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"green.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={!!transition.submission}\n                >\n                  Enviar\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Form>\n      </Stack>\n    </Flex>\n  );\n}\n", "import { UserEntity } from \"../entities/User\";\nimport { BetEntity } from \"../entities/Bet\";\nimport { query as sql } from \"db\";\nimport chunk from \"lodash.chunk\";\nimport crypto from \"crypto\";\nimport type { User } from \"~/types\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const createNewUser = async (\n  user: User & { password: string; verified: boolean }\n) => {\n  return await UserEntity.put({\n    ...user,\n    id: user.email,\n    sk: user.email,\n    legacyId: crypto?.randomUUID(),\n    gsi1pk: \"User#Current\",\n    verified: true,\n  });\n};\n\nexport const listUsers = async () => {\n  const { Items } = await UserEntity.query(\"User#Current\", {\n    reverse: true,\n    index: \"gsi1pk-points-index\",\n  });\n\n  return Items.map(\n    ({ firstName, lastName, points, id, email, verified, legacyId }: User) => ({\n      id,\n      firstName,\n      lastName,\n      points: points?.toFixed(2),\n      email,\n      verified,\n      legacyId,\n    })\n  );\n};\n\nexport const updateUserToken = async (email: string, token: string) => {\n  return await UserEntity.update({ id: email, sk: email, token });\n};\n\nexport const updateUserPassword = async (email: string, password: string) => {\n  return await UserEntity.update({\n    id: email,\n    sk: email,\n    password,\n    token: null,\n  });\n};\n\nexport const getUsersByEmail = async (emails: string[]) => {\n  const { Responses } = await MonoTable.batchGet(\n    emails.map((email) => UserEntity.getBatch({ id: email, sk: email }))\n  );\n\n  return (Responses?.golftime || [])\n    .map(({ email, firstName, lastName, points }: User) => ({\n      email,\n      firstName,\n      lastName,\n      points: points?.toFixed(2),\n    }))\n    .sort((a: User, b: User) => (b.points || 0) - (a.points || 0));\n};\n\n/*  const { rows, rowCount } = await sql(`select * from bets`, []);\n\n  const chunks = chunk(rows, 20);\n\n  for (let chunkIndex in chunks) {\n    const block = chunks[chunkIndex];\n\n    console.log(\n      `Block Number: ${chunkIndex} of ${chunks.length}. Block size: ${block.length}`\n    );\n    let promiseArray: Promise<any>[] = [];\n\n    for (const blockIndex in block) {\n      const item = block[blockIndex];\n\n      promiseArray.push(\n        BetEntity.put({\n          id: item.eventid,\n          sk: item.userid,\n          result: parseFloat(item.result),\n          season: item.season,\n          createdAt: item.created_on.toString(),\n          players: item.players.map((pl: any) => ({\n            id: pl,\n            img:\n              \"https://a.espncdn.com/i/headshots/golf/players/full/\" +\n              pl +\n              \".png\",\n            name: \"\",\n          })),\n        })\n      );\n    }\n    await Promise.all(promiseArray);\n  } */\n/* const { rows, rowCount } = await sql(`select * from users`, []);\n\n  const chunks = chunk(rows, 20);\n\n  for (let chunkIndex in chunks) {\n    const block = chunks[chunkIndex];\n\n    console.log(\n      `Block Number: ${chunkIndex} of ${chunks.length}. Block size: ${block.length}`\n    );\n    let promiseArray: Promise<any>[] = [];\n\n    const resp = await BetEntity.scan({\n      filters: [\n        {\n          attr: \"season\",\n          eq: 2022,\n        },\n      ],\n    });\n\n    let map: Record<string, number> = {};\n    resp.Items.forEach((bet: any) => {\n      map[bet.sk] = (map[bet.sk] || 0) + parseFloat(bet?.result || 0);\n    });\n\n    for (const blockIndex in block) {\n      const item = block[blockIndex];\n      const {\n        firstname: firstName,\n        lastname: lastName,\n        email,\n        password,\n        verified,\n        token,\n        createdAt,\n        id,\n      } = item;\n\n      await promiseArray.push(\n        UserEntity.put({\n          id: email,\n          sk: email,\n          gsi1pk: \"User#Current\",\n          password,\n          firstName,\n          lastName,\n          email,\n          verified,\n          token,\n          createdAt,\n          legacyId: id\n           oints: map[id],\n        })\n      );\n    }\n\n    await Promise.all(promiseArray);\n  } */\n/*   const resp = await BetEntity.scan({\n    filters: [\n      {\n        attr: \"season\",\n        eq: 2022,\n      },\n    ],\n  });\n\n  let map: Record<string, number> = {};\n  resp.Items.forEach((bet: any) => {\n    map[bet.sk] = (map[bet.sk] || 0) + parseFloat(bet?.result || 0);\n  });\n\n  let promiseArray: Promise<any>[] = [];\n\n  Object.keys(map).forEach((key) => {\n    promiseArray.push(\n      UserEntity.update({ pk: key, sk: \"User#Current\", points: map[key] })\n    );\n  });\n\n  await Promise.all(promiseArray);\n\n  console.debug(\"$$$\", map); */\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport { hasMailBeenSent } from \"~/services/imap.server\";\nimport EventManager from \"~/services/events.server\";\nimport { sendTeeTimes } from \"~/services/email.server\";\nimport { listUsers } from \"~/services/user.server\";\nimport type { User } from \"~/types\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  const tokenWithBearer = request.headers.get(\"authorization\") || \"\";\n  const token = tokenWithBearer.split(\" \")[1];\n  if (token !== process.env.GITHUB_TOKEN) {\n    throw Error(\"Unauth to bulk update\");\n  }\n\n  try {\n    const mailSent = await hasMailBeenSent();\n    const nextEvent = await EventManager.getActiveEvent();\n    console.debug(\"Mail sent: \", mailSent);\n\n    if (!mailSent && nextEvent?.status === \"pre\") {\n      const next = await EventManager.fetchEventById(nextEvent.id);\n      if (next?.competitors?.length) {\n        const rows: User[] = await listUsers();\n\n        await sendTeeTimes(\n          rows\n            .filter((row: User) => row.verified)\n            .map((row: User) => row.email),\n          nextEvent.id,\n          next.name\n        );\n      }\n    }\n\n    return true;\n  } catch (e) {\n    console.error(\"Error sending tee times: \", e);\n    return null;\n  }\n};\n", "import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Image,\n  Input,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n  Form,\n  useActionData,\n  useLoaderData,\n  useTransition,\n} from \"@remix-run/react\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserPassword } from \"~/services/user.server\";\nimport Logo from \"../assets/golftime.svg\";\n\nexport const loader: LoaderFunction = async ({ request, context = {} }) => {\n  const url = new URL(request.url);\n  const token = url.searchParams.get(\"token\") as string;\n\n  if (!token) {\n    return null;\n  }\n\n  const user = await jwt.verify(\n    token,\n    process.env.PRIVATE_KEY || \"someprivatekey\"\n  );\n\n  if (!user) {\n    return redirect(\"/\");\n  }\n\n  return json(user);\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const repeatPass = formData.get(\"repeat-password\") as string;\n\n  if (!password || !repeatPass) {\n    return \"Complete todos los campos\";\n  }\n\n  if (password !== repeatPass) {\n    return \"Las contrase\u00F1as no coinciden\";\n  }\n\n  if (\n    /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm.test(password) ===\n    false\n  ) {\n    return \"La contrase\u00F1a debe contener 8 caracteres, al menos una may\u00FAscula, una min\u00FAscula\";\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const response = await updateUserPassword(email, hashedPassword);\n\n  if (response) {\n    return redirect(\"/\");\n  }\n\n  return \"Algo sali\u00F3 mal\";\n};\n\nexport default function ResetPassword() {\n  const transition = useTransition();\n  const user = useLoaderData();\n  const error = useActionData();\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack\n        spacing={8}\n        mx={\"auto\"}\n        minW={{ sm: \"sm\", md: \"md\" }}\n        py={12}\n        px={6}\n      >\n        <Stack align={\"center\"}>\n          <Image src={Logo} maxW={275} marginX={5} />\n        </Stack>\n\n        <Stack align={\"center\"}>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            Ingrese sus datos\n          </Text>\n        </Stack>\n        <Form method=\"post\">\n          <Box\n            rounded={\"lg\"}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            boxShadow={\"lg\"}\n            p={8}\n          >\n            {error?.message && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            {error && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <Stack spacing={4}>\n              <FormControl id=\"password\" isRequired>\n                <FormLabel>Contrase\u00F1a</FormLabel>\n                <Input type=\"password\" name=\"password\" required />\n              </FormControl>\n              <FormControl id=\"repeat-password\" isRequired>\n                <FormLabel>Repita Contrase\u00F1a</FormLabel>\n\n                <Input type=\"password\" name=\"repeat-password\" />\n              </FormControl>\n              <input\n                type=\"email\"\n                name=\"email\"\n                hidden\n                value={user?.email}\n                readOnly\n              />\n              <Stack spacing={10}>\n                <Button\n                  bg={\"green.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"green.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={!!transition.submission}\n                >\n                  Enviar\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Form>\n      </Stack>\n    </Flex>\n  );\n}\n", "import { Box } from \"@chakra-ui/react\";\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport EventCardItem from \"~/components/EventCardItem\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport { useSearchBar } from \"~/hooks\";\nimport authenticator from \"~/services/auth.server\";\nimport EventsManager from \"~/services/events.server\";\nimport type { ScheduledEvent, User } from \"~/types\";\n\ninterface LoaderData {\n  events: ScheduledEvent[];\n  user: User | null;\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  return json<LoaderData>({\n    events: await EventsManager.getEvents(),\n    user,\n  });\n};\n\nexport default function Events() {\n  const { events, user } = useLoaderData<LoaderData>();\n  const [SearchBar, filteredEvents] = useSearchBar(\n    events,\n    (e) => (event) =>\n      event.name.toLowerCase().includes(e.target.value.toLowerCase()),\n    true\n  );\n\n  return (\n    <SimpleSidebar>\n      <Box>\n        <SearchBar />\n        {filteredEvents.map((event) => (\n          <EventCardItem\n            id={event.link?.split(\"=\")?.[1]}\n            key={event.link?.split(\"=\")?.[1] || event.name}\n            event={event}\n            userId={user?.id}\n          ></EventCardItem>\n        ))}\n      </Box>\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Badge,\n  Box,\n  Button,\n  Center,\n  Heading,\n  Image,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { Link } from \"@remix-run/react\";\nimport type { ScheduledEvent } from \"~/types\";\n\nexport default function EventCardItem({\n  event,\n  id,\n  userId = \"\",\n}: {\n  event: ScheduledEvent;\n  id: string;\n  userId?: string;\n}) {\n  const badgeBg = useColorModeValue(\"gray.50\", \"gray.800\");\n\n  return (\n    <Center py={2} minH=\"100%\">\n      <Box\n        maxW={\"640px\"}\n        w={\"full\"}\n        bg={useColorModeValue(\"white\", \"gray.900\")}\n        boxShadow={\"2xl\"}\n        rounded={\"lg\"}\n        p={6}\n        textAlign={\"center\"}\n      >\n        <Heading fontSize={\"2xl\"} fontFamily={\"body\"}>\n          {event.name}\n        </Heading>\n        <Text\n          textAlign={\"center\"}\n          color={useColorModeValue(\"gray.700\", \"gray.400\")}\n          px={3}\n        >\n          {event.locations[0]?.venue.fullName}\n        </Text>\n\n        <Stack align={\"center\"} justify={\"center\"} direction={\"row\"} mt={6}>\n          <Image src={event.athlete.flag} maxW=\"10\" />\n          <Text>{event.athlete.name}</Text>\n          {event.purse && (\n            <Badge fontSize=\"md\" px={4} py={1} bg={badgeBg} fontWeight={\"400\"}>\n              {event.purse}\n            </Badge>\n          )}\n        </Stack>\n\n        {userId && (\n          <Stack mt={8} direction={\"row\"} spacing={4}>\n            <Button\n              flex={1}\n              fontSize={\"sm\"}\n              rounded={\"full\"}\n              bg={\"green.400\"}\n              color={\"white\"}\n              boxShadow={\n                \"0px 1px 25px -5px rgb(66 153 225 / 48%), 0 10px 10px -5px rgb(66 153 225 / 43%)\"\n              }\n              _hover={{\n                bg: \"green.500\",\n              }}\n              _focus={{\n                bg: \"green.500\",\n              }}\n              as={Link}\n              to={`/events/${id}/user/${userId}`}\n            >\n              Leaderboard\n            </Button>\n          </Stack>\n        )}\n      </Box>\n    </Center>\n  );\n}\n", "import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Input,\n  SimpleGrid,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, useLoaderData, useTransition } from \"@remix-run/react\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport authenticator from \"~/services/auth.server\";\nimport { createGroup, getGroupsForMember } from \"~/services/groups.server\";\nimport type { User } from \"~/types\";\n\ninterface LoaderData {\n  groups: { id: string; name: string }[];\n  user: User | null;\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  let groups = [];\n\n  if (user?.email) {\n    groups = await getGroupsForMember(user.email);\n  }\n\n  return json<LoaderData>({ groups, user });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const userId = (await formData.get(\"userId\")) as string;\n\n  const groupName = (await formData.get(\"groupName\")) as string;\n\n  await createGroup(groupName, userId);\n\n  return null;\n};\n\nexport default function MyGroups() {\n  const { groups, user } = useLoaderData<LoaderData>();\n  const transition = useTransition();\n\n  return (\n    <SimpleSidebar>\n      <Box\n        rounded={\"lg\"}\n        bg={useColorModeValue(\"white\", \"gray.700\")}\n        boxShadow={\"lg\"}\n        p={8}\n        marginBottom=\"5\"\n      >\n        <Heading fontSize={\"2xl\"} fontFamily={\"body\"} marginBottom=\"2\">\n          Crear Grupo\n        </Heading>\n        <Form method=\"post\">\n          <Flex>\n            <Input\n              placeholder=\"Nombre del Grupo\"\n              name=\"groupName\"\n              marginRight=\"2\"\n            />\n            <Input hidden name=\"userId\" defaultValue={user?.email} />\n            <Button\n              bg={\"green.400\"}\n              color={\"white\"}\n              _hover={{\n                bg: \"green.500\",\n              }}\n              type=\"submit\"\n              isLoading={transition.state === \"submitting\"}\n            >\n              Guardar\n            </Button>\n          </Flex>\n        </Form>\n      </Box>\n      <SimpleGrid\n        columnGap={{ sm: 0, md: 10 }}\n        templateColumns={{\n          base: \"1fr\",\n          md: \"1fr 1fr\",\n        }}\n      >\n        {groups.map(({ name, id }) => (\n          <Flex\n            key={id}\n            marginBottom=\"2\"\n            rounded={\"lg\"}\n            bg={\"white\"}\n            boxShadow={\"lg\"}\n            p={8}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Heading fontSize={\"lg\"}>{name}</Heading>\n            <Button as={Link} to={`/groups/${id}`}>\n              Ver Grupo\n            </Button>\n          </Flex>\n        ))}\n      </SimpleGrid>\n    </SimpleSidebar>\n  );\n}\n", "import { Entity } from \"dynamodb-toolbox\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const GroupEntity = new Entity({\n  name: \"Group\",\n  attributes: {\n    pk: { partitionKey: true },\n    sk: { sortKey: true },\n    gsi2pk: { type: \"string\" },\n    groupName: { type: \"string\" },\n    createdAt: { type: \"string\" },\n  },\n\n  // Assign it to our table\n  table: MonoTable,\n});\n", "import { GroupEntity } from \"~/entities/Group\";\nimport crypto from \"crypto\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const createGroup = async (groupName: string, userId: string) => {\n  const groupId = crypto?.randomUUID();\n\n  return MonoTable.transactWrite([\n    GroupEntity.putTransaction({\n      pk: `GROUP#${groupId}`,\n      sk: `GROUP#${groupId}`,\n      groupName,\n    }),\n    GroupEntity.putTransaction({\n      pk: `GROUP#${groupId}`,\n      sk: `USER#${userId}`,\n      gsi2pk: `USER#${userId}`,\n      groupName,\n    }),\n  ]);\n};\n\nexport const addMember = async (\n  groupId: string,\n  memberId: string,\n  groupName: string\n) => {\n  return await GroupEntity.put({\n    pk: `GROUP#${groupId}`,\n    sk: `USER#${memberId}`,\n    groupName,\n  });\n};\n\nexport const removeMember = async (groupId: string, memberId: string) => {\n  return await GroupEntity.delete({\n    pk: `GROUP#${groupId}`,\n    sk: `USER#${memberId}`,\n  });\n};\n\nexport const getGroupsForMember = async (memberId: string) => {\n  const { Items } = await GroupEntity.query(`USER#${memberId}`, {\n    index: \"gsi2pk-pk-index\",\n  });\n\n  return (Items || []).map((item: { pk: string; groupName: string }) => ({\n    id: item.pk.split(\"#\")?.[1],\n    name: item.groupName,\n  }));\n};\n\nexport const getMembersForGroup = async (groupId: string) => {\n  const { Items } = await GroupEntity.query(`GROUP#${groupId}`, {\n    beginsWith: \"USER\",\n  });\n\n  return (Items || []).map(\n    ({ sk, groupName }: { sk: string; groupName: string }) => ({\n      email: sk.split(\"#\")?.[1],\n      groupName,\n    })\n  );\n};\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport { bulkUpdateResults } from \"~/services/bet.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  const tokenWithBearer = request.headers.get(\"authorization\") || \"\";\n  const token = tokenWithBearer.split(\" \")[1];\n  if (token !== process.env.GITHUB_TOKEN) {\n    throw Error(\"Unauth to bulk update\");\n  }\n\n  await bulkUpdateResults();\n\n  return null;\n};\n", "import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Input,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Form,\n  Link,\n  useActionData,\n  useLoaderData,\n  useTransition,\n} from \"@remix-run/react\";\nimport keyBy from \"lodash.keyby\";\nimport { useEffect } from \"react\";\nimport { MiniTable } from \"~/components/MiniTable\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport { useSearchBar } from \"~/hooks\";\nimport authenticator from \"~/services/auth.server\";\nimport EventsManager from \"~/services/events.server\";\nimport {\n  addMember,\n  getMembersForGroup,\n  removeMember,\n} from \"~/services/groups.server\";\nimport { getUsersByEmail, listUsers } from \"~/services/user.server\";\nimport type { Tournament, User } from \"~/types\";\n\ninterface LoaderData {\n  allUsers: User[];\n  groupName: string;\n  users: User[];\n  currentEvent: Tournament | null;\n}\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  const { id } = params;\n\n  if (!id) {\n    return null;\n  }\n\n  const members = await getMembersForGroup(id);\n\n  const [users, currentEvent, allUsers] = await Promise.all([\n    getUsersByEmail(members.map(({ email }: { email: string }) => email)),\n    EventsManager.fetchCurrentEvent(),\n    listUsers(),\n  ]);\n\n  return json<LoaderData>({\n    users,\n    currentEvent,\n    groupName: members[0]?.groupName,\n    allUsers,\n  });\n};\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const { id } = params;\n\n  if (!id) {\n    return null;\n  }\n\n  const formData = await request.formData();\n  const email = (await formData.get(\"email\")) as string;\n  const groupName = (await formData.get(\"groupName\")) as string;\n  const isAdd = (await formData.get(\"add\")) as string;\n\n  if (isAdd) {\n    await addMember(id, email, groupName);\n  } else {\n    await removeMember(id, email);\n  }\n\n  return \"success\";\n};\n\nexport default function Group() {\n  const { allUsers, users, currentEvent, groupName } =\n    useLoaderData<LoaderData>();\n  const transition = useTransition();\n  const actionData = useActionData();\n  const usersMap = keyBy(users, \"email\");\n\n  const [SearchBar, foundUsers, reset] = useSearchBar<User>(\n    allUsers,\n    (e) => (user: User) =>\n      (user.firstName.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        user.lastName.toLowerCase().includes(e.target.value.toLowerCase())) &&\n      !usersMap[user.email]\n  );\n\n  useEffect(() => {\n    if (actionData === \"success\") {\n      reset();\n    }\n  }, [actionData, reset]);\n\n  return (\n    <SimpleSidebar>\n      <Heading>{groupName}</Heading>\n      <Box\n        rounded={\"lg\"}\n        bg={useColorModeValue(\"white\", \"gray.700\")}\n        boxShadow={\"lg\"}\n        p={8}\n        marginBottom=\"5\"\n      >\n        <Heading fontSize={\"lg\"} marginBottom=\"5\">\n          Agregar Miembros\n        </Heading>\n        <SearchBar variant=\"outline\" />\n        {foundUsers.map((user) => (\n          <Form method=\"post\" key={user.legacyId}>\n            <Flex\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              marginY=\"5\"\n            >\n              <Text>\n                {user.firstName} {user.lastName}\n                <Input name=\"email\" hidden value={user.id} />\n                <Input name=\"add\" hidden value={\"add\"} />\n                <Input name=\"groupName\" hidden value={groupName} />\n              </Text>\n              <Button\n                isLoading={transition.state === \"submitting\"}\n                type=\"submit\"\n              >\n                Agregar\n              </Button>\n            </Flex>\n          </Form>\n        ))}\n      </Box>\n      <MiniTable\n        title={`Posiciones ${groupName}`}\n        columns={[\n          {\n            Header: \"Usuario\",\n            Cell: (props) => (\n              <Text fontWeight={\"600\"} marginLeft={2}>\n                {currentEvent?.status !== \"in\" ? (\n                  `${props.row.original.firstName} ${props.row.original.lastName}`\n                ) : (\n                  <Link\n                    to={`/events/${currentEvent?.id}/user/${props.row.original.legacyId}`}\n                  >\n                    {props.row.original.firstName} {props.row.original.lastName}\n                  </Link>\n                )}\n              </Text>\n            ),\n          },\n          { Header: \"Puntos\", accessor: \"points\" },\n          {\n            Header: \"Acciones\",\n            Cell: (props) => (\n              <Form method=\"post\">\n                <Input name=\"email\" hidden value={props.row.original.email} />\n                <Button\n                  bg={\"red.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"red.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={transition.state === \"submitting\"}\n                >\n                  Quitar\n                </Button>\n              </Form>\n            ),\n          },\n        ]}\n        data={users}\n      />\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { Column } from \"react-table\";\nimport { usePagination, useTable } from \"react-table\";\n\nexport function MiniTable({\n  title,\n  columns,\n  data,\n}: {\n  title?: string | React.ReactNode;\n  columns: Column<any>[];\n  data: any[];\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    pageCount,\n    state: { pageIndex },\n    nextPage,\n    previousPage,\n  } = useTable({ columns, data }, usePagination);\n\n  return (\n    <Box\n      maxWidth={\"full\"}\n      overflow=\"hidden\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      boxShadow={\"2xl\"}\n      rounded={\"lg\"}\n      p={6}\n    >\n      {!!title && (\n        <Heading fontSize={\"lg\"} marginY={5}>\n          {title}\n        </Heading>\n      )}\n      <TableContainer>\n        <Table variant=\"simple\" {...getTableProps()}>\n          <Thead>\n            {headerGroups.map((headerGroup, i) => (\n              <Tr {...headerGroup.getHeaderGroupProps()} key={i}>\n                {headerGroup.headers.map((column, j) => (\n                  <Th {...column.getHeaderProps()} key={j}>\n                    {column.render(\"Header\")}\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody {...getTableBodyProps()}>\n            {page.map((row: any, i: number) => {\n              prepareRow(row);\n              return (\n                <Tr {...row.getRowProps()} key={i}>\n                  {row.cells.map((cell: any, j: number) => {\n                    return (\n                      <Td {...cell.getCellProps()} key={j}>\n                        {cell.render(\"Cell\")}\n                      </Td>\n                    );\n                  })}\n                </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n      <Flex marginY={5} justifyContent=\"center\" alignItems={\"center\"}>\n        <Button onClick={previousPage} size=\"sm\">\n          Prev\n        </Button>\n        <Box marginX={5}>\n          Pagina {pageIndex + 1} de {pageCount}\n        </Box>\n        <Button onClick={nextPage} size=\"sm\">\n          Prox\n        </Button>\n      </Flex>\n    </Box>\n  );\n}\n", "import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Image,\n  Input,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useTransition } from \"@remix-run/react\";\nimport bcrypt from \"bcryptjs\";\nimport authenticator from \"~/services/auth.server\";\nimport { createNewUser } from \"~/services/user.server\";\nimport Logo from \"../assets/golftime.svg\";\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  const clone = request.clone();\n  const formData = await request.formData();\n  const password = formData.get(\"password\") as string;\n  const repeatPass = formData.get(\"repeat-password\");\n  const firstName = formData.get(\"firstName\") as string;\n  const lastName = formData.get(\"lastName\") as string;\n  const email = formData.get(\"email\") as string;\n\n  if (!firstName || !lastName || !password || !email) {\n    return json<any>({ error: \"Complete todos los campos\" });\n  }\n\n  if (password !== repeatPass) {\n    return json<any>({ error: \"Las contrase\u00F1as no coinciden\" });\n  }\n\n  if (\n    /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm.test(password) ===\n    false\n  ) {\n    return json<any>({\n      error:\n        \"La contrase\u00F1a debe contener 8 caracteres, al menos una may\u00FAscula, una min\u00FAscula\",\n    });\n  }\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  const response = await createNewUser({\n    id: \"\",\n    firstName,\n    lastName,\n    email,\n    password: hashedPassword,\n    verified: true,\n    points: 0,\n  });\n\n  if (!response) {\n    return json<any>({\n      error: \"Ya existe una cuenta con ese email\",\n    });\n  }\n  // call my authenticator\n  const resp = await authenticator.authenticate(\"form\", clone, {\n    successRedirect: \"/\",\n    failureRedirect: \"/login\",\n    throwOnError: true,\n    context,\n  });\n\n  return resp;\n};\n\nexport default function LoginPage() {\n  // if i got an error it will come back with the loader data\n  const transition = useTransition();\n  const { error } = useActionData() || {};\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack\n        spacing={8}\n        mx={\"auto\"}\n        minW={{ sm: \"sm\", md: \"md\" }}\n        py={12}\n        px={6}\n      >\n        <Stack align={\"center\"}>\n          <Image src={Logo} maxW={275} marginX={5} />\n        </Stack>\n\n        <Stack align={\"center\"}>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            Ingrese sus datos\n          </Text>\n        </Stack>\n        <Form method=\"post\">\n          <Box\n            rounded={\"lg\"}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            boxShadow={\"lg\"}\n            p={8}\n          >\n            {error?.message && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            {error && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <Stack spacing={4}>\n              <FormControl id=\"name\" isRequired>\n                <FormLabel>Nombre</FormLabel>\n                <Input type=\"text\" name=\"firstName\" />\n              </FormControl>\n              <FormControl id=\"lastname\" isRequired>\n                <FormLabel>Apellido</FormLabel>\n                <Input type=\"text\" name=\"lastName\" />\n              </FormControl>\n              <FormControl id=\"email\" isRequired>\n                <FormLabel>Email</FormLabel>\n                <Input type=\"email\" name=\"email\" />\n              </FormControl>\n              <FormControl id=\"password\" isRequired>\n                <FormLabel>Contrase\u00F1a</FormLabel>\n                <Input type=\"password\" name=\"password\" required />\n              </FormControl>\n              <FormControl id=\"repeat-password\" isRequired>\n                <FormLabel>Repita Contrase\u00F1a</FormLabel>\n                <Input type=\"password\" name=\"repeat-password\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Button\n                  bg={\"green.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"green.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={!!transition.submission}\n                >\n                  Registrarme\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Form>\n      </Stack>\n    </Flex>\n  );\n}\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport authenticator from \"~/services/auth.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: \"/login\" });\n};\n", "import {\n  Avatar,\n  Button,\n  Flex,\n  GridItem,\n  Heading,\n  SimpleGrid,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport keyBy from \"lodash.keyby\";\nimport EventCardItem from \"~/components/EventCardItem\";\nimport { Foursome } from \"~/components/Foursome\";\nimport { MiniTable } from \"~/components/MiniTable\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport authenticator from \"~/services/auth.server\";\nimport type { Bet } from \"~/services/bet.server\";\nimport { currentBet, lastEventBets } from \"~/services/bet.server\";\nimport EventsManager from \"~/services/events.server\";\nimport type { User } from \"~/types\";\nimport { listUsers } from \"~/services/user.server\";\nimport type { Competitor, ScheduledEvent, Tournament } from \"~/types\";\n\ninterface LoaderData {\n  currentUser: User | null;\n  currentEvent: Tournament;\n  users: User[];\n  nextEvent: ScheduledEvent | null | undefined;\n  lastWinner: { points: number; user: User };\n  liveBet: Bet | null;\n}\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  const auth = authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  let [currentUser, users, currentEvent, nextEvent, lastEvent] =\n    await Promise.all([\n      auth,\n      listUsers(),\n      EventsManager.fetchCurrentEvent(),\n      EventsManager.getNextActiveEvent(),\n      EventsManager.getLastActiveEvent(),\n    ]);\n\n  const [liveBet, lastEventResults] = await Promise.all([\n    currentBet(currentEvent?.id, currentUser?.legacyId),\n    lastEventBets(lastEvent?.id),\n  ]);\n\n  currentEvent = {\n    ...currentEvent,\n    competitors: currentEvent.competitors?.sort(\n      (a, b) =>\n        parseInt(a.pos.replace(\"T\", \"\")) - parseInt(b.pos.replace(\"T\", \"\"))\n    ),\n  };\n\n  const lastWinner = {\n    points: lastEventResults?.[0]?.result,\n    user: users.find((u: User) => lastEventResults[0]?.userId === u.legacyId),\n  };\n\n  return json<LoaderData>({\n    currentUser,\n    currentEvent,\n    users,\n    nextEvent,\n    lastWinner,\n    liveBet,\n  });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: \"/login\" });\n};\n\nexport default function DashboardPage() {\n  const { currentUser, currentEvent, users, nextEvent, liveBet, lastWinner } =\n    useLoaderData<LoaderData>();\n  const colorValue = useColorModeValue(\"white\", \"gray.900\");\n  const { id: currentEventId, status, name, competitors } = currentEvent;\n\n  const positionsByPlayer = keyBy(competitors, \"id\");\n  const foursome = (liveBet?.players || []).reduce(\n    (acc: Record<string, Competitor>, pl) => {\n      acc[pl.id] = positionsByPlayer[pl.id];\n      return acc;\n    },\n    {}\n  );\n\n  return (\n    <SimpleSidebar>\n      <SimpleGrid\n        columnGap={{ sm: 0, md: 10 }}\n        templateColumns={{\n          base: \"1fr\",\n          md: liveBet ? \"1fr 2fr 1fr\" : \"1fr 1fr\",\n        }}\n      >\n        {lastWinner && (\n          <Flex\n            w={\"full\"}\n            bg={colorValue}\n            boxShadow={\"2xl\"}\n            rounded={\"lg\"}\n            p={6}\n            my={2}\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Heading fontSize={24}>\u00DAltimo Ganador</Heading>\n            <Heading variant={\"h1\"} fontSize={50}>\n              \u26F3\n            </Heading>\n            <Text fontSize={20} fontWeight=\"bold\">\n              {lastWinner.user?.firstName} {lastWinner.user?.lastName}\n            </Text>\n            <Text fontSize={15} fontWeight=\"bold\">\n              {lastWinner.points} Puntos\n            </Text>\n          </Flex>\n        )}\n        {liveBet && (\n          <GridItem\n            w={\"full\"}\n            bg={colorValue}\n            boxShadow={\"2xl\"}\n            rounded={\"lg\"}\n            p={6}\n            my={2}\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n          >\n            <Foursome foursome={foursome} />\n          </GridItem>\n        )}\n        {nextEvent && (\n          <GridItem colSpan={1} minH=\"100%\">\n            <EventCardItem id={nextEvent.id} event={nextEvent} />\n          </GridItem>\n        )}\n      </SimpleGrid>\n      <SimpleGrid\n        columns={{ sm: 1, md: 2 }}\n        columnGap={{ sm: 0, md: 30 }}\n        marginY=\"10\"\n      >\n        <MiniTable\n          title={\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n              <Text>{name}</Text>\n              <Button\n                bg={\"green.400\"}\n                color={\"white\"}\n                _hover={{\n                  bg: \"green.500\",\n                }}\n                as={Link}\n                to={`/events/${currentEventId}/user/${currentUser?.legacyId}`}\n              >\n                {status === \"pre\" && competitors.length\n                  ? \"Elegir jugadores\"\n                  : \"Ver Torneo\"}\n              </Button>\n            </Flex>\n          }\n          columns={[\n            { Header: \"Pos\", accessor: \"pos\" },\n            {\n              Header: \"Player\",\n              Cell: ({ row }) => (\n                <Flex alignItems={\"center\"}>\n                  <Avatar src={row.original.img} size=\"sm\" />\n                  <Text fontWeight={\"600\"} marginLeft={2}>\n                    {row.original.name}\n                  </Text>\n                </Flex>\n              ),\n            },\n            { Header: \"Total\", accessor: \"toPar\" },\n            { Header: \"Score\", accessor: \"today\" },\n          ]}\n          data={competitors || []}\n        />\n\n        <MiniTable\n          title=\"Posiciones\"\n          columns={[\n            {\n              Header: \"Usuario\",\n              Cell: ({ row }) => (\n                <Text fontWeight={\"600\"} marginLeft={2}>\n                  {status !== \"in\" ? (\n                    `${row.original.firstName} ${row.original.lastName}`\n                  ) : (\n                    <Link\n                      to={`/events/${currentEventId}/user/${row.original.legacyId}`}\n                    >\n                      {row.original.firstName} {row.original.lastName}\n                    </Link>\n                  )}\n                </Text>\n              ),\n            },\n            { Header: \"Puntos\", accessor: \"points\" },\n          ]}\n          data={users}\n        />\n      </SimpleGrid>\n      <Text textAlign=\"center\">Copyright @{new Date().getFullYear()}</Text>\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Image,\n  Input,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, useLoaderData, useTransition } from \"@remix-run/react\";\nimport authenticator from \"~/services/auth.server\";\nimport { sessionStorage } from \"~/services/session.server\";\nimport Logo from \"../assets/golftime.svg\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: \"/\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n  const error = session.get(\"sessionErrorKey\");\n\n  return json<any>({ error });\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  // call my authenticator\n  const resp = await authenticator.authenticate(\"form\", request, {\n    successRedirect: \"/\",\n    failureRedirect: \"/login\",\n    throwOnError: true,\n    context,\n  });\n\n  return resp;\n};\n\nexport default function LoginPage() {\n  // if i got an error it will come back with the loader data\n  const { error } = useLoaderData();\n  const transition = useTransition();\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack\n        spacing={8}\n        mx={\"auto\"}\n        minW={{ sm: \"sm\", md: \"md\" }}\n        py={12}\n        px={6}\n      >\n        <Stack align={\"center\"}>\n          <Image src={Logo} maxW={275} marginX={5} />\n        </Stack>\n\n        <Stack align={\"center\"}>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            Adelante y suerte! \uD83C\uDFCC\uFE0F\u200D\u2642\uFE0F\uD83C\uDFCC\uFE0F\u200D\u2640\uFE0F\n          </Text>\n        </Stack>\n        <Form method=\"post\">\n          <Box\n            rounded={\"lg\"}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            boxShadow={\"lg\"}\n            p={8}\n          >\n            {error?.message && (\n              <Alert status=\"error\" marginY=\"5\">\n                <AlertIcon />\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email</FormLabel>\n                <Input type=\"email\" name=\"email\" />\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Contrase\u00F1a</FormLabel>\n                <Input type=\"password\" name=\"password\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: \"column\", sm: \"row\" }}\n                  align={\"start\"}\n                  justify={\"space-between\"}\n                >\n                  <Link to=\"/sign-up\" color={\"green.400\"}>\n                    Registrarme\n                  </Link>\n                  <Link to=\"/forgot-password\" color={\"green.400\"}>\n                    Olvid\u00E9 mi contrase\u00F1a\n                  </Link>\n                </Stack>\n                <Button\n                  bg={\"green.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"green.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={!!transition.submission}\n                >\n                  Iniciar Sesi\u00F3n\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Form>\n      </Stack>\n    </Flex>\n  );\n}\n", "export default {'version':'96bc8ac1','entry':{'module':'/build/entry.client-IT5FXFVF.js','imports':['/build/_shared/chunk-LAZZWI6T.js','/build/_shared/chunk-GPJ4ES4R.js','/build/_shared/chunk-AQH56Z2S.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-NZOW2IP2.js','imports':['/build/_shared/chunk-RKXUZ5RF.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/bulk-update':{'id':'routes/bulk-update','parentId':'root','path':'bulk-update','index':undefined,'caseSensitive':undefined,'module':'/build/routes/bulk-update-DSCE62IY.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/check-teetimes':{'id':'routes/check-teetimes','parentId':'root','path':'check-teetimes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/check-teetimes-6ATS5GX4.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/events/$eventId.user.$userId':{'id':'routes/events/$eventId.user.$userId','parentId':'root','path':'events/:eventId/user/:userId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/events/$eventId.user.$userId-MXUJXEZV.js','imports':['/build/_shared/chunk-ZGOVMMVF.js','/build/_shared/chunk-7OLIE5NH.js','/build/_shared/chunk-PQ7WGFSC.js','/build/_shared/chunk-M2PUVFOM.js','/build/_shared/chunk-7BJC4C5E.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/events/index':{'id':'routes/events/index','parentId':'root','path':'events','index':true,'caseSensitive':undefined,'module':'/build/routes/events/index-OWWMFDH3.js','imports':['/build/_shared/chunk-XX475ZYN.js','/build/_shared/chunk-PQ7WGFSC.js','/build/_shared/chunk-M2PUVFOM.js','/build/_shared/chunk-7BJC4C5E.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/forgot-password':{'id':'routes/forgot-password','parentId':'root','path':'forgot-password','index':undefined,'caseSensitive':undefined,'module':'/build/routes/forgot-password-ZLHKDZV4.js','imports':['/build/_shared/chunk-3SF6COE7.js','/build/_shared/chunk-4VBKWNA2.js','/build/_shared/chunk-6LB63U36.js','/build/_shared/chunk-SPGUIPHZ.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/groups/$id':{'id':'routes/groups/$id','parentId':'root','path':'groups/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/groups/$id-M6U2YDBL.js','imports':['/build/_shared/chunk-47HJEEEW.js','/build/_shared/chunk-7OLIE5NH.js','/build/_shared/chunk-SPGUIPHZ.js','/build/_shared/chunk-PQ7WGFSC.js','/build/_shared/chunk-M2PUVFOM.js','/build/_shared/chunk-YB27RG2Z.js','/build/_shared/chunk-7BJC4C5E.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/groups/index':{'id':'routes/groups/index','parentId':'root','path':'groups','index':true,'caseSensitive':undefined,'module':'/build/routes/groups/index-OFNEIIT3.js','imports':['/build/_shared/chunk-YB27RG2Z.js','/build/_shared/chunk-7BJC4C5E.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-VKLTCMFR.js','imports':['/build/_shared/chunk-47HJEEEW.js','/build/_shared/chunk-ZGOVMMVF.js','/build/_shared/chunk-7OLIE5NH.js','/build/_shared/chunk-SPGUIPHZ.js','/build/_shared/chunk-XX475ZYN.js','/build/_shared/chunk-M2PUVFOM.js','/build/_shared/chunk-7BJC4C5E.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-464OT34H.js','imports':['/build/_shared/chunk-3SF6COE7.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-4MYU3SMR.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reset-password':{'id':'routes/reset-password','parentId':'root','path':'reset-password','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reset-password-UBJDJY2N.js','imports':['/build/_shared/chunk-NNXTNAAG.js','/build/_shared/chunk-4VBKWNA2.js','/build/_shared/chunk-6LB63U36.js','/build/_shared/chunk-SPGUIPHZ.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/sign-up':{'id':'routes/sign-up','parentId':'root','path':'sign-up','index':undefined,'caseSensitive':undefined,'module':'/build/routes/sign-up-4KY5FAVM.js','imports':['/build/_shared/chunk-NNXTNAAG.js','/build/_shared/chunk-6LB63U36.js','/build/_shared/chunk-SPGUIPHZ.js','/build/_shared/chunk-Y7H4UYHY.js','/build/_shared/chunk-G2HN3BHD.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-96BC8AC1.js'};", "\nimport * as entryServer from \"/Users/juancruzleyba/Desktop/golftimeapp/app/entry.server.tsx\";\nimport * as route0 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/root.tsx\";\nimport * as route1 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/$eventId.user.$userId.tsx\";\nimport * as route2 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/forgot-password.tsx\";\nimport * as route3 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/check-teetimes.tsx\";\nimport * as route4 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/reset-password.tsx\";\nimport * as route5 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/index.tsx\";\nimport * as route6 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/groups/index.tsx\";\nimport * as route7 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/bulk-update.tsx\";\nimport * as route8 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/groups/$id.tsx\";\nimport * as route9 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/sign-up.tsx\";\nimport * as route10 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/logout.tsx\";\nimport * as route11 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/index.tsx\";\nimport * as route12 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/events/$eventId.user.$userId\": {\n      id: \"routes/events/$eventId.user.$userId\",\n      parentId: \"root\",\n      path: \"events/:eventId/user/:userId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/forgot-password\": {\n      id: \"routes/forgot-password\",\n      parentId: \"root\",\n      path: \"forgot-password\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/check-teetimes\": {\n      id: \"routes/check-teetimes\",\n      parentId: \"root\",\n      path: \"check-teetimes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/reset-password\": {\n      id: \"routes/reset-password\",\n      parentId: \"root\",\n      path: \"reset-password\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/events/index\": {\n      id: \"routes/events/index\",\n      parentId: \"root\",\n      path: \"events\",\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/groups/index\": {\n      id: \"routes/groups/index\",\n      parentId: \"root\",\n      path: \"groups\",\n      index: true,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/bulk-update\": {\n      id: \"routes/bulk-update\",\n      parentId: \"root\",\n      path: \"bulk-update\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/groups/$id\": {\n      id: \"routes/groups/$id\",\n      parentId: \"root\",\n      path: \"groups/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/sign-up\": {\n      id: \"routes/sign-up\",\n      parentId: \"root\",\n      path: \"sign-up\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,YAAuB;;;ACDvB;AAAA;AAAA;AAAA;AACA,oBAA+B;AAC/B,oBAA8B;AAC9B,6BAAgC;AAChC,oBAA4B;;;ACH5B,mBAA8B;AAQvB,IAAM,qBAAqB,gCAEhC;AAMK,IAAM,qBAAqB,gCAChC;;;ACjBF,mBAAwB;AAET,8BAA8B;AAC3C,SAAO,0BAAY,EAAE,KAAK;AAAA;;;AFM5B,IAAM,MAAM,QAAQ;AACpB,IAAI,OAAO,OAAO;AAAA,EAChB,QAAQ;AAAA,EACR,aAAa,QAAQ,IAAI;AAAA,EACzB,iBAAiB,QAAQ,IAAI;AAAA;AAGhB,uBACb,SACA,oBACA,iBACA,cACA;AACA,QAAM,QAAQ;AACd,QAAM,EAAE,4BAA4B,oCAAoB;AAExD,QAAM,OAAO,kCACX,oCAAC,mBAAmB,UAApB;AAAA,IAA6B,OAAO;AAAA,KAClC,oCAAC,6BAAD;AAAA,IAAe,OAAO;AAAA,KACpB,oCAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAKvD,QAAM,SAAS,wBAAwB;AAEvC,QAAM,SAAS,kCACb,oCAAC,mBAAmB,UAApB;AAAA,IAA6B,OAAO,OAAO;AAAA,KACzC,oCAAC,6BAAD;AAAA,IAAe,OAAO;AAAA,KACpB,oCAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAKvD,kBAAgB,IAAI,gBAAgB;AAEpC,SAAO,IAAI,SAAS,kBAAkB,UAAU;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AGhDb;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAA6C;AAC7C,oBAAiC;AACjC,oBAA+B;AAC/B,oBAOO;AAKA,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAGL,IAAI,QAAuB,MAAM;AACtC,SAAO;AAAA,IACL;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA;AAAA,IAER,EAAE,KAAK,cAAc,MAAM;AAAA,IAC3B,EAAE,KAAK,cAAc,MAAM;AAAA,IAC3B;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA;AAAA;AASZ,IAAM,WAAW,oCACf,CAAC,EAAE,YAA2B,iBAAiB;AAC7C,QAAM,kBAAkB,8BAAW;AACnC,QAAM,kBAAkB,8BAAW;AAGnC,+BAAU,MAAM;AAEd,iBAAa,MAAM,YAAY,SAAS;AAExC,UAAM,OAAO,aAAa,MAAM;AAChC,iBAAa,MAAM;AACnB,SAAK,QAAQ,CAAC,QAAQ;AACpB,MAAC,aAAa,MAAc,WAAW;AAAA;AAGzC,uDAAiB;AAAA,KAChB;AAEH,SACE,oDAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oDAAC,QAAD,MACE,oDAAC,oBAAD,OACA,oDAAC,qBAAD,OACC,mDAAiB,IAAI,CAAC,EAAE,KAAK,KAAK,UACjC,oDAAC,SAAD;AAAA,IACE;AAAA,IACA,gBAAc,GAAG,OAAO,IAAI,KAAK;AAAA,IACjC,yBAAyB,EAAE,QAAQ;AAAA,QAIzC,oDAAC,QAAD,MACG,UACD,oDAAC,iCAAD,OACA,oDAAC,uBAAD,OACA,oDAAC,0BAAD;AAAA;AAOK,eAAe;AAC5B,SACE,oDAAC,UAAD,MACE,oDAAC,8BAAD,MACE,oDAAC,sBAAD;AAAA;;;ACzFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsD;AAEtD,mBAAqB;AACrB,qBAA0D;AAC1D,oBAAkB;AAClB,qBAAsC;;;ACLtC,oBASO;AAQA,IAAM,WAAW,CAAC,EAAE,eAA2C;AACpE,QAAM,UAAU,qCAAkB,WAAW;AAE7C,QAAM,SAAS,OAAO,KAAK,UAAU,OAAO,CAAC,KAAK,QAAQ;AACxD,UAAM,MACH,UAAS,KAAK,OAAO,IAAI,QAAQ,KAAK,IAAI,QAAQ,KAAK,QAAQ;AAElE,WAAO,SAAS,OAAO,MAAM,SAAS,OAAO;AAC7C,WAAO;AAAA,KACN;AAEH,SACE,0DACE,oCAAC,uBAAD;AAAA,IAAS,UAAU;AAAA,IAAI,cAAa;AAAA,KAAK,gBAGxC,QAAQ,YACP,oCAAC,oBAAD;AAAA,IACE,SAAQ;AAAA,IACR,gBAAe;AAAA,IACf,YAAW;AAAA,IACX,MAAM;AAAA,KAEN,oCAAC,sBAAD;AAAA,IAAQ,KAAK;AAAA,IAAI,MAAK;AAAA,MACtB,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,IAAI,YAAY;AAAA,IAAQ,WAAU;AAAA,KAAS,oBAKtD,oCAAC,0BAAD;AAAA,IAAY,SAAQ;AAAA,IAAO,SAAS;AAAA,KACjC,OAAO,KAAK,UAAU,IAAI,CAAC,OAC1B,oCAAC,oBAAD;AAAA,IACE,SAAQ;AAAA,IACR,KAAK;AAAA,IACL,gBAAe;AAAA,IACf,YAAW;AAAA,IACX,MAAM;AAAA,KAEN,oCAAC,sBAAD;AAAA,IAAQ,KAAK,SAAS,IAAI;AAAA,IAAK,MAAK;AAAA,MACpC,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,IAAI,YAAY;AAAA,IAAQ,WAAU;AAAA,KACxC,SAAS,IAAI,OAEhB,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,IAAI,YAAY;AAAA,IAAQ,WAAU;AAAA,KACxC,SAAS,IAAI,SAMxB,oCAAC,mBAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,qBAAD;AAAA,IACE,UAAS;AAAA,IACT,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,SAAQ;AAAA,IACR,WAAW;AAAA,KACZ,YACU,OAAO,QAAQ;AAAA;AAOlC,iBACE,KACS;AACT,aAAW,QAAQ,KAAK;AACtB,WAAO;AAAA;AAET,SAAO;AAAA;;;ACzFT,oBAWO;AAGA,IAAM,cAAc,CAAC,EAAE,iBAA6C;AACzE,SACE,oCAAC,8BAAD,MACE,oCAAC,qBAAD;AAAA,IAAO,SAAQ;AAAA,KACb,oCAAC,qBAAD,MACE,oCAAC,kBAAD,MACE,oCAAC,kBAAD,MAAI,gBACJ,oCAAC,kBAAD,MAAI,YACJ,oCAAC,kBAAD,MAAI,UACJ,oCAAC,kBAAD,MAAI,UACJ,oCAAC,kBAAD,MAAI,WAGR,oCAAC,qBAAD,MACG,WAAW,YAAY,IAAI,CAAC,eAC3B,oCAAC,kBAAD;AAAA,IAAI,KAAK,WAAW;AAAA,KAClB,oCAAC,kBAAD,MAAK,WAAW,MAChB,oCAAC,kBAAD,MACE,oCAAC,oBAAD;AAAA,IAAM,YAAY;AAAA,KAChB,oCAAC,sBAAD;AAAA,IAAQ,KAAK,WAAW;AAAA,MACxB,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,IAAI,YAAY;AAAA,KACtB,WAAW,SAIlB,oCAAC,kBAAD,MAAK,WAAW,QAChB,oCAAC,kBAAD,MAAK,WAAW,QAChB,oCAAC,kBAAD,MAAK,WAAW;AAAA;;;ACzC9B,qBAA6D;AAC7D,qBAA4B;AAC5B,iBAA4C;AAIrC,IAAM,kBAAkB,CAAC;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,MAKI;AACJ,QAAM,YAAY,gCAChB,CAAC,WAAuB;AACtB,aAAS,iCACJ,YADI;AAAA,OAEN,OAAO,KAAK;AAAA,QACX,KAAK,OAAO;AAAA,QACZ,IAAI,OAAO;AAAA,QACX,MAAM,OAAO;AAAA,QACb,KAAK,OAAO;AAAA;AAAA;AAAA,KAIlB,CAAC,UAAU;AAGb,QAAM,eAAe,gCACnB,CAAC,WAAuB;AA/B5B;AAgCM,UAA0C,gBAAjC,eAAO,KAAK,YAAqB,IAAT,iBAAS,IAAT,CAAxB;AACT,aAAS;AAAA,KAEX,CAAC,UAAU;AAGb,SACE,oCAAC,2BAAD;AAAA,IAAY,eAAc;AAAA,IAAQ,SAAQ;AAAA,KACvC,YAAY,IAAI,CAAC,WAAuB;AACvC,WACE,oCAAC,qBAAD;AAAA,MACE,SAAQ;AAAA,MACR,KAAK,OAAO;AAAA,MACZ,gBAAe;AAAA,MACf,YAAW;AAAA,MACX,MAAM;AAAA,OAEN,oCAAC,uBAAD;AAAA,MAAQ,KAAK,OAAO;AAAA,MAAK,MAAK;AAAA,QAC9B,oCAAC,qBAAD;AAAA,MAAM,IAAG;AAAA,MAAI,YAAY;AAAA,MAAQ,WAAU;AAAA,OACxC,OAAO,OAET,UAAU,OAAO,MAChB,oCAAC,uBAAD;AAAA,MACE,SAAS,MAAM,aAAa;AAAA,MAC5B,UAAU,oCAAC,qBAAD;AAAA,QAAM,IAAI;AAAA;AAAA,MACpB,aAAY;AAAA,OACb,YAID,oCAAC,uBAAD;AAAA,MACE,SAAS,MAAM,UAAU;AAAA,MACzB,UAAU,oCAAC,qBAAD;AAAA,QAAM,IAAI;AAAA;AAAA,MACpB,aAAY;AAAA,MACZ,UAAU,OAAO,KAAK,WAAW,WAAW;AAAA,OAC7C;AAAA;AAAA;;;AClEf,qBAYO;AACP,qBAA2B;AAE3B,qBAAkB;AAElB,gBAAuB;AACvB,kBAKO;;;;;;AAQP,IAAM,YAAkC;AAAA,EACtC,EAAE,MAAM,UAAU,MAAM,oBAAQ,MAAM;AAAA,EACtC,EAAE,MAAM,WAAW,MAAM,wBAAY,MAAM;AAAA,EAC3C,EAAE,MAAM,UAAU,MAAM,mCAAuB,MAAM;AAAA,EACrD,EAAE,MAAM,cAAc,MAAM,iCAAqB,MAAM;AAAA;AAG1C,uBAAuB,EAAE,YAAqC;AAC3E,QAAM,EAAE,QAAQ,QAAQ,YAAY;AACpC,SACE,qDAAC,oBAAD;AAAA,IAAK,MAAK;AAAA,IAAQ,IAAI,sCAAkB,YAAY;AAAA,KAClD,qDAAC,gBAAD;AAAA,IACE,SAAS,MAAM;AAAA,IACf,SAAS,EAAE,MAAM,QAAQ,IAAI;AAAA,MAE/B,qDAAC,uBAAD;AAAA,IACE,WAAW;AAAA,IACX;AAAA,IACA,WAAU;AAAA,IACV;AAAA,IACA,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,IAChB,MAAK;AAAA,KAEL,qDAAC,8BAAD,MACE,qDAAC,gBAAD;AAAA,IAAgB;AAAA,QAIpB,qDAAC,WAAD;AAAA,IAAW,SAAS,EAAE,MAAM,QAAQ,IAAI;AAAA,IAAU;AAAA,MAClD,qDAAC,oBAAD;AAAA,IAAK,IAAI,EAAE,MAAM,GAAG,IAAI;AAAA,IAAM,GAAE;AAAA,KAC7B;AAAA;AAUT,IAAM,iBAAiB,CAAC,OAAuC;AAAvC,eAAE,cAAF,IAAc,iBAAd,IAAc,CAAZ;AACxB,SACE,qDAAC,oBAAD;AAAA,IACE,IAAI,sCAAkB,SAAS;AAAA,IAC/B,aAAY;AAAA,IACZ,kBAAkB,sCAAkB,YAAY;AAAA,IAChD,GAAG,EAAE,MAAM,QAAQ,IAAI;AAAA,IACvB,KAAI;AAAA,IACJ,GAAE;AAAA,IACF,WAAW;AAAA,KACP,OAEJ,qDAAC,qBAAD;AAAA,IAAM,GAAE;AAAA,IAAK,YAAW;AAAA,IAAS,IAAG;AAAA,IAAI,gBAAe;AAAA,KACrD,qDAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA,MAEtC,qDAAC,4BAAD;AAAA,IAAa,SAAS,EAAE,MAAM,QAAQ,IAAI;AAAA,IAAU,SAAS;AAAA,OAG9D,UAAU,IAAI,CAAC,SACd,qDAAC,SAAD;AAAA,IAAS,KAAK,KAAK;AAAA,IAAM,MAAM,KAAK;AAAA,IAAM,MAAM,KAAK;AAAA,KAClD,KAAK,QAGV,qDAAC,oBAAD;AAAA,IAAK,GAAG;AAAA,KACN,qDAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,IAAO,QAAO;AAAA,KACzB,qDAAC,uBAAD;AAAA,IAAQ,MAAK;AAAA,KAAS;AAAA;AAYhC,IAAM,UAAU,CAAC,OAAoD;AAApD,eAAE,QAAM,UAAU,SAAlB,IAA2B,iBAA3B,IAA2B,CAAzB,QAAM,YAAU;AACjC,SACE,qDAAC,qBAAD;AAAA,IAAM,IAAI;AAAA,IAAM,OAAO,EAAE,gBAAgB;AAAA,KACvC,qDAAC,qBAAD;AAAA,IACE,OAAM;AAAA,IACN,GAAE;AAAA,IACF,IAAG;AAAA,IACH,cAAa;AAAA,IACb,MAAK;AAAA,IACL,QAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA,MACJ,OAAO;AAAA;AAAA,KAEL,OAEH,QACC,qDAAC,qBAAD;AAAA,IACE,IAAG;AAAA,IACH,UAAS;AAAA,IACT,aAAa;AAAA,MACX,OAAO;AAAA;AAAA,IAET,IAAI;AAAA,MAGP;AAAA;AAST,IAAM,YAAY,CAAC,OAAqC;AAArC,eAAE,aAAF,IAAa,iBAAb,IAAa,CAAX;AACnB,SACE,qDAAC,qBAAD;AAAA,IACE,IAAI,EAAE,MAAM,GAAG,IAAI;AAAA,IACnB,IAAI,EAAE,MAAM,GAAG,IAAI;AAAA,IACnB,QAAO;AAAA,IACP,YAAW;AAAA,IACX,IAAI,sCAAkB,SAAS;AAAA,IAC/B,mBAAkB;AAAA,IAClB,mBAAmB,sCAAkB,YAAY;AAAA,IACjD,gBAAe;AAAA,KACX,OAEJ,qDAAC,2BAAD;AAAA,IACE,SAAQ;AAAA,IACR,SAAS;AAAA,IACT,cAAW;AAAA,IACX,MAAM,qDAAC,kBAAD;AAAA,MAGR,qDAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA;AAAA;;;ACrK5C,qBAAoD;AACpD,qBAA6C;AAC7C,kBAAyB;AAMlB,sBACL,MACA,WACA,YAC2D;AAC3D,QAAM,CAAC,MAAM,WAAW,6BAAc,aAAa,OAAO;AAC1D,QAAM,CAAC,OAAO,YAAY,6BAAS;AAEnC,QAAM,SAAS,gCACb,CAAC,MAA2C;AAC1C,QAAI,EAAE,OAAO,OAAO;AAClB,cAAQ,KAAK,OAAO,UAAU;AAAA,WACzB;AACL,cAAQ,aAAa,OAAO;AAAA;AAAA,KAGhC,CAAC,SAAS,YAAY,MAAM;AAG9B,QAAM,QAAQ,gCAAY,MAAM;AAC9B,aAAS;AACT,YAAQ,aAAa,OAAO;AAAA,KAC3B,CAAC,SAAS,MAAM;AAEnB,QAAM,YAAY,CAAC,EAAE,UAAU,eAC7B,qDAAC,2BAAD;AAAA,IAAY,MAAM;AAAA,IAAK,QAAO;AAAA,KAC5B,qDAAC,iCAAD;AAAA,IAAkB,eAAc;AAAA,IAAO,UAAU,qDAAC,sBAAD;AAAA,MACjD,qDAAC,sBAAD;AAAA,IACE,WAAS;AAAA,IACT;AAAA,IACA,IAAI;AAAA,IACJ,UAAU,CAAC,MAAM;AACf,aAAO;AACP,eAAS,EAAE,OAAO;AAAA;AAAA,IAEpB;AAAA,IACA,aAAY;AAAA;AAKlB,SAAO,CAAC,WAAW,MAAM;AAAA;;;ACjD3B,oBAAmB;AACnB,wBAAkD;AAClD,6BAA6B;;;ACF7B,+BAAuB;;;ACAvB,8BAAsB;AAEtB,sBAAqB;AACrB,IAAM,iBAAiB,IAAI,wBAAS;AAG7B,IAAM,YAAY,IAAI,8BAAM;AAAA,EAEjC,MAAM;AAAA,EAGN,cAAc;AAAA,EACd,SAAS;AAAA,EACT,aAAa;AAAA,EACb,WAAW;AAAA,EAGX;AAAA,EACA,SAAS;AAAA,IACP,uBAAuB,EAAE,cAAc,UAAU,SAAS;AAAA,IAC1D,mBAAmB,EAAE,cAAc,UAAU,SAAS;AAAA;AAAA;;;ADjBnD,IAAM,aAAa,IAAI,gCAAO;AAAA,EACnC,MAAM;AAAA,EACN,YAAY;AAAA,IACV,IAAI,EAAE,cAAc;AAAA,IACpB,IAAI,EAAE,QAAQ,MAAM,SAAS;AAAA,IAC7B,WAAW,EAAE,MAAM;AAAA,IACnB,UAAU,EAAE,MAAM;AAAA,IAClB,OAAO,EAAE,MAAM;AAAA,IACf,QAAQ,EAAE,MAAM;AAAA,IAChB,kBAAkB,EAAE,MAAM;AAAA,IAC1B,UAAU,EAAE,MAAM;AAAA,IAClB,UAAU,EAAE,MAAM;AAAA,IAClB,WAAW,EAAE,MAAM;AAAA,IACnB,OAAO,EAAE,MAAM;AAAA,IACf,QAAQ,EAAE,MAAM;AAAA,IAChB,UAAU,EAAE,MAAM;AAAA;AAAA,EAIpB,OAAO;AAAA;;;AEtBT,kBAA2C;AAGpC,IAAI,iBAAiB,4CAA2B;AAAA,EACrD,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC,QAAQ,IAAI,eAAe;AAAA,IACrC,QAAQ;AAAA,IACR,SAAS,IAAI,KAAK,KAAK,QAAQ,OAAU,KAAK;AAAA;AAAA;AAK3C,IAAI,EAAE,YAAY,eAAe,mBAAmB;;;AHP3D,IAAM,gBAAgB,IAAI,gCAA2B,gBAAgB;AAAA,EACnE,YAAY;AAAA,EACZ,iBAAiB;AAAA;AAGnB,cAAc,IACZ,IAAI,oCAAa,OAAO,QAAQ;AAC9B,MAAI,QAAQ,IAAI,KAAK,IAAI;AACzB,MAAI,WAAW,IAAI,KAAK,IAAI;AAE5B,MAAI,CAAC,SAAS,gCAAO,YAAW;AAC9B,UAAM,IAAI,qCAAmB;AAC/B,MAAI,OAAO,UAAU;AACnB,UAAM,IAAI,qCAAmB;AAE/B,MAAI,CAAC,YAAY,sCAAU,YAAW;AACpC,UAAM,IAAI,qCAAmB;AAC/B,MAAI,OAAO,aAAa;AACtB,UAAM,IAAI,qCACR;AAGJ,QAAM,EAAE,MAAM,SAAS,MAAM,WAAW,IAAI,EAAE,IAAI,OAAO,IAAI;AAE7D,MAAI,MAAM;AACR,UAAM,gBAAgB,MAAM,sBAAO,QAAQ,UAAU,KAAK;AAE1D,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,qCAAmB;AAAA;AAG/B,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,WAAW,KAAK;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,OAAO,KAAK;AAAA,MACZ,UAAU,KAAK;AAAA;AAAA,SAEZ;AACL,UAAM,IAAI,qCAAmB;AAAA;AAAA;AAKnC,IAAO,sBAAQ;;;AIrDf,+BAAuB;AAGhB,IAAM,YAAY,IAAI,gCAAO;AAAA,EAClC,MAAM;AAAA,EACN,YAAY;AAAA,IACV,IAAI,EAAE,cAAc;AAAA,IACpB,IAAI,EAAE,SAAS;AAAA,IACf,QAAQ,EAAE,MAAM;AAAA,IAChB,SAAS,EAAE,MAAM;AAAA,IACjB,QAAQ,EAAE,MAAM;AAAA,IAChB,WAAW,EAAE,MAAM;AAAA;AAAA,EAIrB,OAAO;AAAA;;;ACbT,yBAAuB;AACvB,wBAAuB;AACvB,qBAAoB;;;ACJpB,wBAAuB;AAEvB,uBAAuB;AACrB,QAAM,eAAc,0BAAW,gBAAgB;AAAA,IAC7C,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,MACJ,MAAM,QAAQ,IAAI;AAAA,MAClB,MAAM,QAAQ,IAAI;AAAA;AAAA;AAItB,SAAO;AAAA;AAyBT,gCAAuC,OAAe,OAAe;AACnE,QAAM,cAAc;AAAA,IAClB,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,MAAM,yEAAsE,QAAQ,IAAI,+BAA+B;AAAA;AAEzH,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,kBAAc,SAAS,aAAa,SAAU,OAAY,MAAW;AACnE,UAAI,OAAO;AACT,gBAAQ,IAAI;AACZ,eAAO;AAAA,aACF;AACL,gBAAQ,IAAI;AACZ,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAMhB,4BACE,QACA,SACA,WACA;AACA,QAAM,gBAAgB,UAAU,cAAc,WAAW,SACrD,YACA,MAAM;AAEV,QAAM,cAAc;AAAA,IAClB,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,KAAK,OAAO;AAAA,IACZ,SAAS,yBAAyB;AAAA,IAClC,MAAM,mEAAmE,0FAAuF,QAAQ,IAAI,iBAAiB;AAAA;AAAA;AAG/L,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,kBAAc,SAAS,aAAa,SAAU,OAAY,MAAW;AACnE,UAAI,OAAO;AACT,gBAAQ,IAAI;AACZ,eAAO;AAAA,aACF;AACL,gBAAQ,IAAI;AACZ,gBAAQ;AAAA;AAAA;AAAA;AAAA;;;ACpFhB,iCAAuB;AACvB,wBAAuB;AAEvB,IAAI,SAAS,IAAI,mCAAW,kBAAkB,KAAK;AAAA,EACjD,MAAM;AAAA,IACJ,MAAM,QAAQ,IAAI;AAAA,IAClB,MAAM,QAAQ,IAAI;AAAA;AAAA,EAEpB,oBAAoB;AAAA;AAGtB,iCAAwC;AAZxC;AAaE,MAAI;AACF,UAAM,OAAO;AAEb,UAAM,QAAQ,MAAM,OAAO,cAAc;AAEzC,UAAM,CAAC,eAAe,MAAM,OAAO,aACjC,uBACA,MAAM,QACN,CAAC;AAGH,UAAM,OAAO,iDAAa,aAAb,mBAAuB;AACpC,UAAM,cAAc,+BAAW,IAAI,KAAK,OAAO,EAAE,cAAc;AAC/D,YAAQ,IAAI,kBAAkB,YAAY;AAE1C,WAAO;AAEP,WAAO;AAAA,WACA,GAAP;AACA,YAAQ,MAAM;AAAA;AAGhB,SAAO;AACP,SAAO;AAAA;;;AF1BT,yBAAmB;AAAA,EAEjB,cAAc;AAuGd,0BAAsD,OAAO,OAAO;AAClE,YAAM,OAAO,MAAM,MAAM,GAAG,QAAQ,IAAI,uBAAuB;AAE/D,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,MAAM;AAAA;AAGd,YAAM,EAAE,gBAAgB,MAAM,KAAK;AAEnC,aAAO,iCACF,cADE;AAAA,QAEL,aAAa,YAAY,YAAY,IAAI,CAAC,SAAkB;AA9HlE;AA8HsE,kDAC3D,OAD2D;AAAA,YAE9D,KAAK,GAAG,mCAAM,QAAN,mBAAW,QACjB,QACA;AAAA;AAAA;AAAA;AAAA;AAMR,6BAA+C,YAAY;AACzD,YAAM,eAAe,MAAM,KAAK;AAEhC,UAAI,CAAC,8CAAc,KAAI;AACrB,cAAM,MAAM;AAAA;AAGd,aAAO,MAAM,KAAK,eAAe,aAAa;AAAA;AAlI9C,SAAK,SAAS;AAAA;AAAA,QAGV,YAAuC;AAC3C,QAAI;AACF,UAAI,KAAK,OAAO;AAAQ,eAAO,KAAK;AAEpC,YAAM,OAAO,MAAM,MAAM,GAAG,QAAQ,IAAI;AAExC,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,MAAM;AAAA;AAGd,YAAM,EAAE,WAAyC,MAAM,KAAK;AAE5D,WAAK,SAAS,OAAO,OAAO,CAAC,MAAa,UAAe;AA5B/D;AA6BQ,YAAI,+BAAO,MAAM;AACf,gBAAM,KAAK,qCAAO,SAAP,mBAAa,MAAM,KAAK;AACnC,gBAAM,OAAO,2CAAO,YAAP,mBAAgB,SAAhB,mBAAsB,QACjC,QACA;AAGF,eAAK,KAAK;AAAA,YACR;AAAA,aACG,QAFK;AAAA,YAGR,SAAS,iCACJ,MAAM,UADF;AAAA,cAEP;AAAA;AAAA,YAEF,UAAU,iDAAO,cAAP,mBAAmB,OAAnB,mBAAuB,UAAvB,mBAA8B;AAAA;AAAA;AAI5C,eAAO;AAAA,SACN;AAAA,aACI,GAAP;AACA,cAAQ,MAAM;AAAA;AAGhB,WAAO,KAAK;AAAA;AAAA,QAGR,iBAA6D;AACjE,QAAI;AACF,YAAM,YAAY,MAAM,KAAK;AAC7B,UAAI,CAAC,wCAAW;AAAQ,eAAO;AAE/B,aAAO,uCAAW,KAChB,CAAC,SACC,gCAAW,IAAI,KAAK,KAAK,YAAY,EAAE,cAAc,QACrD,KAAK,gBAAgB;AAAA,aAElB,GAAP;AACA,cAAQ,MAAM;AAAA;AAAA;AAAA,QAIZ,qBAAiE;AACrE,QAAI;AACF,YAAM,YAAY,MAAM,KAAK;AAC7B,UAAI,CAAC,wCAAW;AAAQ,eAAO;AAE/B,YAAM,QAAQ,uCAAW,KACvB,CAAC,SACC,KAAK,WAAW,SAChB,CAAC,gCAAW,IAAI,KAAK,KAAK,YAAY,EAAE,cAAc,QACtD,4BAAQ,IAAI,KAAK,KAAK,YAAY,IAAI,WACtC,KAAK,gBAAgB;AAEzB,aAAO;AAAA,aACA,GAAP;AACA,cAAQ,MAAM;AAAA;AAAA;AAAA,QAIZ,qBAAqB;AACzB,QAAI;AACF,YAAM,YAAY,MAAM,KAAK;AAC7B,UAAI,CAAC,wCAAW;AAAQ,eAAO;AAE/B,YAAM,QAAQ,uCAAW,UAAU,CAAC,SAAc,KAAK,WAAW;AAClE,YAAM,UAAU,UAAU,QAAQ;AAClC,YAAM,YAAY,UAAU,QAAQ;AACpC,UAAI,QAAQ;AACZ,UAAI,WAAW,WAAW;AACxB,gBAAQ,+BACN,IAAI,KAAK,QAAQ,YACjB,IAAI,KAAK,UAAU;AAAA;AAIvB,UAAI,OAAO;AACT,eAAO,QAAQ,QAAQ,UAAU;AAAA;AAGnC,aAAO;AAAA,aACA,GAAP;AACA,cAAQ,MAAM;AAAA;AAAA;AAAA,QAmCZ,iBAAiB;AAlJzB;AAmJI,QAAI;AACF,YAAM,WAAW,MAAM;AACvB,YAAM,YAAY,MAAM,KAAK;AAC7B,cAAQ,MAAM,eAAe;AAE7B,UAAI,CAAC,YAAY,wCAAW,YAAW,OAAO;AAC5C,cAAM,OAAO,MAAM,KAAK,eAAe,UAAU;AACjD,YAAI,mCAAM,gBAAN,mBAAmB,QAAQ;AAC7B,gBAAM,EAAE,OAAO,SAAS,MAAM,WAAW,MAAM;AAE/C,gBAAM,aACJ,KAAK,IAAI,CAAC,QAA2B,IAAI,QACzC,UAAU,IACV,KAAK;AAAA;AAAA;AAKX,aAAO;AAAA,aACA,GAAP;AACA,aAAO;AAAA;AAAA;AAAA;AAKb,IAAO,wBAAQ,IAAI;;;AG5JZ,IAAM,gBAAgB,OAAO,YAAqB;AACvD,MAAI,CAAC;AAAS,WAAO;AAErB,QAAM,EAAE,UAAU,MAAM,UAAU,MAAM,SAAS;AAAA,IAC/C,SAAS;AAAA;AAGX,SAAO,MAAM,IAAI,CAAC,EAAE,IAAI,QAAQ,aAAmB;AAAA,IACjD;AAAA,IACA;AAAA,MACE,KAAK,CAAC,GAAQ,MAAW,EAAE,SAAS,EAAE;AAAA;AAGrC,IAAM,aAAa,OAAO,SAAkB,WAAoB;AACrE,MAAI,CAAC,WAAW,CAAC;AAAQ,WAAO;AAEhC,QAAM,EAAE,UAAU,MAAM,UAAU,MAAM,SAAS;AAAA,IAC/C,IAAI,OAAO;AAAA;AAGb,SAAO,MAAM,MAAM;AAAA;AAGd,IAAM,UAAU,OACrB,SACA,QACA,YACG;AACH,MAAI,CAAC,WAAW,CAAC;AAAQ,WAAO;AAEhC,QAAM,SAAS,MAAM,UAAU,IAAI;AAAA,IACjC,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,QAAQ,QAAQ,IAAI;AAAA,IACpB;AAAA;AAGF,SAAO;AAAA;AAGF,IAAM,oBAAoB,YAAY;AAC3C,QAAM,YAAY,MAAM,sBAAa;AAErC,MAAI,CAAC,wCAAW,KAAI;AAClB,WAAO,MAAM;AAAA;AAGf,QAAM,CAAC,EAAE,OAAO,QAAQ,eAAe,MAAM,QAAQ,IAAI;AAAA,IACvD,UAAU,MAAM,UAAU;AAAA,IAC1B,sBAAa,eAAe,UAAU;AAAA;AAGxC,MAAI,CAAC,8BAAM,WAAU,CAAC,4CAAa,cAAa;AAC9C,WAAO,MAAM;AAAA;AAGf,QAAM,aAAa,WAAW,YAAY;AAE1C,MAAI,eAA+B;AAEnC,OAAK,QAAQ,CAAC,QAAa;AACzB,UAAM,SAAS,WAAW,IAAI,SAAS;AACvC,iBAAa,KACX,WAAW,OACT;AAAA,MACE,IAAI,IAAI;AAAA,MACR,IAAI;AAAA,MACJ,QAAQ,EAAE,MAAM;AAAA,MAChB,kBAAkB,UAAU;AAAA,OAE9B;AAAA,MACE,YAAY;AAAA,QACV,MAAM;AAAA,QACN,IAAI,UAAU;AAAA;AAAA;AAAA;AAOxB,QAAM,QAAQ,IAAI,cAAc,MAAM,MAAM;AAC1C,YAAQ,IAAI;AAAA;AAAA;AAIhB,IAAM,aAAa,CAAC,gBAA8B;AAChD,SAAO,YAAY,OACjB,CAAC,KAAgC,SAAqB;AACpD,UAAM,SACJ,KAAK,QAAQ,MAAM,IAAK,IAAI,SAAS,KAAK,IAAI,QAAQ,KAAK,OAAQ;AACrE,QAAI,KAAK,MAAM;AAEf,WAAO;AAAA,KAET;AAAA;AAIJ,IAAM,aAAa,CACjB,SACA,QACG;AACH,SAAO,QAAQ,OAAO,CAAC,KAAa,OAAuB;AACzD,WAAO,IAAI,GAAG;AACd,WAAO;AAAA,KACN;AAAA;;;AdnGE,IAAM,SAAyB,OAAO,EAAE,SAAS,aAAa;AAtBrE;AAuBE,QAAM,oBAAc,gBAAgB,SAAS;AAAA,IAC3C,iBAAiB;AAAA;AAGnB,QAAM,eAAe,OAAO;AAC5B,QAAM,SAAS,OAAO;AAEtB,MAAI,CAAC,gBAAgB,CAAC,QAAQ;AAC5B,WAAO;AAAA;AAGT,QAAM,CAAC,YAAY,WAAW,MAAM,QAAQ,IAAI;AAAA,IAC9C,sBAAa,eAAe;AAAA,IAC5B,WAAW,cAAc;AAAA;AAG3B,QAAM,oBAAoB,2BAAM,WAAW,aAAa;AAExD,SAAO,uBAAiB;AAAA,IACtB,YAAY,iCACP,aADO;AAAA,MAEV,aAAa,iBAAW,gBAAX,mBAAwB,KACnC,CAAC,GAAG,MACF,SAAS,EAAE,IAAI,QAAQ,KAAK,OAAO,SAAS,EAAE,IAAI,QAAQ,KAAK;AAAA;AAAA,IAGrE,SAAU,qCAAS,YAAW,IAAI,OAAO,CAAC,KAAU,OAAY;AAE9D,UAAI,GAAG,MAAM,kBAAkB,GAAG;AAClC,aAAO;AAAA,OACN;AAAA;AAAA;AAIA,IAAM,SAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,OAAO,MAAM,QAAQ;AAC3B,QAAM,UAAW,MAAM,KAAK,IAAI;AAChC,QAAM,SAAU,MAAM,KAAK,IAAI;AAC/B,QAAM,UAAW,MAAM,KAAK,IAAI;AAEhC,QAAM,QAAQ,SAAS,QAAQ,KAAK,MAAM;AAE1C,SAAO;AAAA;AAGM,uBAAuB;AACpC,QAAM,EAAE,YAAY,YAAY;AAChC,QAAM,CAAC,UAAU,eAAe,6BAA4B,WAAW;AACvE,QAAM,CAAC,WAAW,aAAa,oBAAoB,aACjD,WAAW,aACX,CAAC,MAAM,CAAC,SACN,KAAK,KAAK,cAAc,SAAS,EAAE,OAAO,MAAM,gBAClD;AAEF,QAAM,SAAS;AACf,QAAM,SAAS;AAEf,QAAM,CAAC,UAAU,OAAO,KAAK,WAAW;AAExC,QAAM,WAAW,gCACf,CAAC,cAA2B;AAC1B,UAAM,WAAW,IAAI;AAErB,aAAS,OAAO,WAAW,KAAK,UAAU,OAAO,OAAO;AACxD,aAAS,OAAO,WAAW,WAAW;AACtC,aAAS,OAAO,UAAU,OAAO,UAAU;AAE3C,gBAAY;AACZ;AACA,WAAO,UAAU;AAAA,MACf,QAAQ;AAAA,MACR,QAAQ,WAAW,WAAW,WAAW,OAAO;AAAA;AAAA,KAGpD,CAAC,aAAa,kBAAkB,QAAQ,YAAY,OAAO;AAG7D,SACE,oCAAC,eAAD,MACE,oCAAC,oBAAD;AAAA,IACE,GAAG;AAAA,IACH,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,IACH,IAAI;AAAA,KAEJ,oCAAC,UAAD;AAAA,IAAU;AAAA,OAGZ,oCAAC,oBAAD;AAAA,IACE,GAAG;AAAA,IACH,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,KAEH,oCAAC,wBAAD;AAAA,IAAS,SAAS;AAAA,KAAI,WAAW,OAChC,0CAAY,QAAQ,QAAQ,OAC3B,oCAAC,wBAAD;AAAA,IAAS,SAAS;AAAA,IAAM,UAAS;AAAA,IAAK,SAAS;AAAA,KAC5C,yCAAY,QAAQ,QAAQ,KAGhC,WAAW,WAAW,SAAS,WAAW,cACzC,oCAAC,aAAD;AAAA,IAAa;AAAA,OACX,WAAW,cACb,oCAAC,qBAAD,MACE,oCAAC,oBAAD;AAAA,IAAK,SAAQ;AAAA,KACX,oCAAC,WAAD,QAEF,oCAAC,iBAAD;AAAA,IACE;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,QAIf,oCAAC,qBAAD,MAAM;AAAA;;;Ae5IhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAcO;AAEP,mBAAyB;AACzB,mBAAqB;AACrB,qBAAmD;AACnD,0BAAgB;;;ACfhB,oBAAmB;AAIZ,IAAM,gBAAgB,OAC3B,SACG;AAVL;AAWE,SAAO,MAAM,WAAW,IAAI,iCACvB,OADuB;AAAA,IAE1B,IAAI,KAAK;AAAA,IACT,IAAI,KAAK;AAAA,IACT,UAAU,mDAAQ;AAAA,IAClB,QAAQ;AAAA,IACR,UAAU;AAAA;AAAA;AAIP,IAAM,YAAY,YAAY;AACnC,QAAM,EAAE,UAAU,MAAM,WAAW,MAAM,gBAAgB;AAAA,IACvD,SAAS;AAAA,IACT,OAAO;AAAA;AAGT,SAAO,MAAM,IACX,CAAC,EAAE,WAAW,UAAU,QAAQ,IAAI,OAAO,UAAU,eAAsB;AAAA,IACzE;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,iCAAQ,QAAQ;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAKC,IAAM,kBAAkB,OAAO,OAAe,UAAkB;AACrE,SAAO,MAAM,WAAW,OAAO,EAAE,IAAI,OAAO,IAAI,OAAO;AAAA;AAGlD,IAAM,qBAAqB,OAAO,OAAe,aAAqB;AAC3E,SAAO,MAAM,WAAW,OAAO;AAAA,IAC7B,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ;AAAA,IACA,OAAO;AAAA;AAAA;AAIJ,IAAM,kBAAkB,OAAO,WAAqB;AACzD,QAAM,EAAE,cAAc,MAAM,UAAU,SACpC,OAAO,IAAI,CAAC,UAAU,WAAW,SAAS,EAAE,IAAI,OAAO,IAAI;AAG7D,SAAQ,yCAAW,aAAY,IAC5B,IAAI,CAAC,EAAE,OAAO,WAAW,UAAU,aAAoB;AAAA,IACtD;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,iCAAQ,QAAQ;AAAA,MAEzB,KAAK,CAAC,GAAS,MAAa,GAAE,UAAU,KAAM,GAAE,UAAU;AAAA;;;ADvCxD,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,oBAAc,gBAAgB,SAAS;AAAA,IAC3C,iBAAiB;AAAA;AAGnB,QAAM,UAAU,MAAM,eAAe,WACnC,QAAQ,QAAQ,IAAI;AAEtB,QAAM,QAAQ,QAAQ,IAAI;AAE1B,SAAO,uBAAU,EAAE;AAAA;AAGd,IAAM,UAAyB,OAAO,EAAE,SAAS,cAAc;AACpE,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,QAAS,MAAM,SAAS,IAAI;AAElC,MAAI,CAAC,OAAO;AACV,UAAM,MAAM;AAAA;AAEd,QAAM,QAAQ,4BAAI,KAAK,EAAE,SAAS,QAAQ,IAAI,eAAe,WAAW;AAAA,IACtE,WAAW;AAAA;AAEb,QAAM,OAAO,MAAM,gBAAgB,OAAO;AAC1C,MAAI,MAAM;AACR,UAAM,iBAAiB,OAAO;AAC9B,WAAO,2BAAS;AAAA;AAElB,SAAO;AAAA;AAGM,qBAAqB;AAElC,QAAM,EAAE,UAAU;AAClB,QAAM,aAAa;AAEnB,SACE,oCAAC,qBAAD;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,IAAI,sCAAkB,WAAW;AAAA,KAEjC,oCAAC,sBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,MAAM,EAAE,IAAI,MAAM,IAAI;AAAA,IACtB,IAAI;AAAA,IACJ,IAAI;AAAA,KAEJ,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA,OAExC,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAM,OAAO;AAAA,KAAY,sDAI3C,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,KAEF,gCAAO,YACN,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,MAAM,WAG7B,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,KACd,oCAAC,0BAAD,MAAW,UACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,MAAK;AAAA,OAE3B,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,uBAAD;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,MAAK;AAAA,IACL,WAAW,CAAC,CAAC,WAAW;AAAA,KACzB;AAAA;;;AE/GjB;AAAA;AAAA;AAAA;AAOO,IAAM,UAAyB,OAAO,EAAE,cAAc;AAP7D;AAQE,QAAM,kBAAkB,QAAQ,QAAQ,IAAI,oBAAoB;AAChE,QAAM,QAAQ,gBAAgB,MAAM,KAAK;AACzC,MAAI,UAAU,QAAQ,IAAI,cAAc;AACtC,UAAM,MAAM;AAAA;AAGd,MAAI;AACF,UAAM,WAAW,MAAM;AACvB,UAAM,YAAY,MAAM,sBAAa;AACrC,YAAQ,MAAM,eAAe;AAE7B,QAAI,CAAC,YAAY,wCAAW,YAAW,OAAO;AAC5C,YAAM,OAAO,MAAM,sBAAa,eAAe,UAAU;AACzD,UAAI,mCAAM,gBAAN,mBAAmB,QAAQ;AAC7B,cAAM,OAAe,MAAM;AAE3B,cAAM,aACJ,KACG,OAAO,CAAC,QAAc,IAAI,UAC1B,IAAI,CAAC,QAAc,IAAI,QAC1B,UAAU,IACV,KAAK;AAAA;AAAA;AAKX,WAAO;AAAA,WACA,GAAP;AACA,YAAQ,MAAM,6BAA6B;AAC3C,WAAO;AAAA;AAAA;;;ACrCX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAcO;AAEP,mBAA+B;AAC/B,qBAKO;AACP,sBAAmB;AACnB,2BAAgB;AAIT,IAAM,UAAyB,OAAO,EAAE,SAAS,UAAU,SAAS;AACzE,QAAM,MAAM,IAAI,IAAI,QAAQ;AAC5B,QAAM,QAAQ,IAAI,aAAa,IAAI;AAEnC,MAAI,CAAC,OAAO;AACV,WAAO;AAAA;AAGT,QAAM,OAAO,MAAM,6BAAI,OACrB,OACA,QAAQ,IAAI,eAAe;AAG7B,MAAI,CAAC,MAAM;AACT,WAAO,2BAAS;AAAA;AAGlB,SAAO,uBAAK;AAAA;AAGP,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,QAAQ,SAAS,IAAI;AAC3B,QAAM,WAAW,SAAS,IAAI;AAC9B,QAAM,aAAa,SAAS,IAAI;AAEhC,MAAI,CAAC,YAAY,CAAC,YAAY;AAC5B,WAAO;AAAA;AAGT,MAAI,aAAa,YAAY;AAC3B,WAAO;AAAA;AAGT,MACE,wDAAwD,KAAK,cAC7D,OACA;AACA,WAAO;AAAA;AAGT,QAAM,iBAAiB,MAAM,wBAAO,KAAK,UAAU;AACnD,QAAM,WAAW,MAAM,mBAAmB,OAAO;AAEjD,MAAI,UAAU;AACZ,WAAO,2BAAS;AAAA;AAGlB,SAAO;AAAA;AAGM,yBAAyB;AACtC,QAAM,aAAa;AACnB,QAAM,OAAO;AACb,QAAM,QAAQ;AAEd,SACE,oCAAC,qBAAD;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,IAAI,sCAAkB,WAAW;AAAA,KAEjC,oCAAC,sBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,MAAM,EAAE,IAAI,MAAM,IAAI;AAAA,IACtB,IAAI;AAAA,IACJ,IAAI;AAAA,KAEJ,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA,OAGxC,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAM,OAAO;AAAA,KAAY,uBAI3C,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,KAEF,gCAAO,YACN,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,MAAM,WAG5B,SACC,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,SAGvB,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAW,YAAU;AAAA,KACnC,oCAAC,0BAAD,MAAW,kBACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAW,MAAK;AAAA,IAAW,UAAQ;AAAA,OAEjD,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAkB,YAAU;AAAA,KAC1C,oCAAC,0BAAD,MAAW,yBAEX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAW,MAAK;AAAA,OAE9B,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,QAAM;AAAA,IACN,OAAO,6BAAM;AAAA,IACb,UAAQ;AAAA,MAEV,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,uBAAD;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,MAAK;AAAA,IACL,WAAW,CAAC,CAAC,WAAW;AAAA,KACzB;AAAA;;;ACxJjB;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAEpB,mBAAqB;AACrB,qBAA8B;;;ACH9B,qBAUO;AACP,qBAAqB;AAGN,uBAAuB;AAAA,EACpC;AAAA,EACA;AAAA,EACA,SAAS;AAAA,GAKR;AAtBH;AAuBE,QAAM,UAAU,sCAAkB,WAAW;AAE7C,SACE,oCAAC,uBAAD;AAAA,IAAQ,IAAI;AAAA,IAAG,MAAK;AAAA,KAClB,oCAAC,oBAAD;AAAA,IACE,MAAM;AAAA,IACN,GAAG;AAAA,IACH,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,IACH,WAAW;AAAA,KAEX,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,IAAO,YAAY;AAAA,KACnC,MAAM,OAET,oCAAC,qBAAD;AAAA,IACE,WAAW;AAAA,IACX,OAAO,sCAAkB,YAAY;AAAA,IACrC,IAAI;AAAA,KAEH,YAAM,UAAU,OAAhB,mBAAoB,MAAM,WAG7B,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,IAAU,SAAS;AAAA,IAAU,WAAW;AAAA,IAAO,IAAI;AAAA,KAC/D,oCAAC,sBAAD;AAAA,IAAO,KAAK,MAAM,QAAQ;AAAA,IAAM,MAAK;AAAA,MACrC,oCAAC,qBAAD,MAAO,MAAM,QAAQ,OACpB,MAAM,SACL,oCAAC,sBAAD;AAAA,IAAO,UAAS;AAAA,IAAK,IAAI;AAAA,IAAG,IAAI;AAAA,IAAG,IAAI;AAAA,IAAS,YAAY;AAAA,KACzD,MAAM,SAKZ,UACC,oCAAC,sBAAD;AAAA,IAAO,IAAI;AAAA,IAAG,WAAW;AAAA,IAAO,SAAS;AAAA,KACvC,oCAAC,uBAAD;AAAA,IACE,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,WACE;AAAA,IAEF,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,IAAI;AAAA,IACJ,IAAI,WAAW,WAAW;AAAA,KAC3B;AAAA;;;AD5DN,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,OAAO,MAAM,oBAAc,gBAAgB,SAAS;AAAA,IACxD,iBAAiB;AAAA;AAGnB,SAAO,uBAAiB;AAAA,IACtB,QAAQ,MAAM,sBAAc;AAAA,IAC5B;AAAA;AAAA;AAIW,kBAAkB;AAC/B,QAAM,EAAE,QAAQ,SAAS;AACzB,QAAM,CAAC,WAAW,kBAAkB,aAClC,QACA,CAAC,MAAM,CAAC,UACN,MAAM,KAAK,cAAc,SAAS,EAAE,OAAO,MAAM,gBACnD;AAGF,SACE,oCAAC,eAAD,MACE,oCAAC,oBAAD,MACE,oCAAC,WAAD,OACC,eAAe,IAAI,CAAC,UAAO;AAxCpC;AAyCU,+CAAC,eAAD;AAAA,MACE,IAAI,kBAAM,SAAN,mBAAY,MAAM,SAAlB,mBAAyB;AAAA,MAC7B,KAAK,mBAAM,SAAN,mBAAY,MAAM,SAAlB,mBAAyB,OAAM,MAAM;AAAA,MAC1C;AAAA,MACA,QAAQ,6BAAM;AAAA;AAAA;AAAA;;;AE7C1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAQO;AAEP,mBAAqB;AACrB,qBAAyD;;;ACXzD,+BAAuB;AAGhB,IAAM,cAAc,IAAI,gCAAO;AAAA,EACpC,MAAM;AAAA,EACN,YAAY;AAAA,IACV,IAAI,EAAE,cAAc;AAAA,IACpB,IAAI,EAAE,SAAS;AAAA,IACf,QAAQ,EAAE,MAAM;AAAA,IAChB,WAAW,EAAE,MAAM;AAAA,IACnB,WAAW,EAAE,MAAM;AAAA;AAAA,EAIrB,OAAO;AAAA;;;ACbT,qBAAmB;AAGZ,IAAM,cAAc,OAAO,WAAmB,WAAmB;AAJxE;AAKE,QAAM,UAAU,oDAAQ;AAExB,SAAO,UAAU,cAAc;AAAA,IAC7B,YAAY,eAAe;AAAA,MACzB,IAAI,SAAS;AAAA,MACb,IAAI,SAAS;AAAA,MACb;AAAA;AAAA,IAEF,YAAY,eAAe;AAAA,MACzB,IAAI,SAAS;AAAA,MACb,IAAI,QAAQ;AAAA,MACZ,QAAQ,QAAQ;AAAA,MAChB;AAAA;AAAA;AAAA;AAKC,IAAM,YAAY,OACvB,SACA,UACA,cACG;AACH,SAAO,MAAM,YAAY,IAAI;AAAA,IAC3B,IAAI,SAAS;AAAA,IACb,IAAI,QAAQ;AAAA,IACZ;AAAA;AAAA;AAIG,IAAM,eAAe,OAAO,SAAiB,aAAqB;AACvE,SAAO,MAAM,YAAY,OAAO;AAAA,IAC9B,IAAI,SAAS;AAAA,IACb,IAAI,QAAQ;AAAA;AAAA;AAIT,IAAM,qBAAqB,OAAO,aAAqB;AAC5D,QAAM,EAAE,UAAU,MAAM,YAAY,MAAM,QAAQ,YAAY;AAAA,IAC5D,OAAO;AAAA;AAGT,SAAQ,UAAS,IAAI,IAAI,CAAC,SAAyC;AA9CrE;AA8CyE;AAAA,MACrE,IAAI,WAAK,GAAG,MAAM,SAAd,mBAAqB;AAAA,MACzB,MAAM,KAAK;AAAA;AAAA;AAAA;AAIR,IAAM,qBAAqB,OAAO,YAAoB;AAC3D,QAAM,EAAE,UAAU,MAAM,YAAY,MAAM,SAAS,WAAW;AAAA,IAC5D,YAAY;AAAA;AAGd,SAAQ,UAAS,IAAI,IACnB,CAAC,EAAE,IAAI,gBAAgD;AA1D3D;AA0D+D;AAAA,MACzD,OAAO,SAAG,MAAM,SAAT,mBAAgB;AAAA,MACvB;AAAA;AAAA;AAAA;;;AFtCC,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,OAAO,MAAM,oBAAc,gBAAgB,SAAS;AAAA,IACxD,iBAAiB;AAAA;AAGnB,MAAI,SAAS;AAEb,MAAI,6BAAM,OAAO;AACf,aAAS,MAAM,mBAAmB,KAAK;AAAA;AAGzC,SAAO,uBAAiB,EAAE,QAAQ;AAAA;AAG7B,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,SAAU,MAAM,SAAS,IAAI;AAEnC,QAAM,YAAa,MAAM,SAAS,IAAI;AAEtC,QAAM,YAAY,WAAW;AAE7B,SAAO;AAAA;AAGM,oBAAoB;AACjC,QAAM,EAAE,QAAQ,SAAS;AACzB,QAAM,aAAa;AAEnB,SACE,oCAAC,eAAD,MACE,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,IACH,cAAa;AAAA,KAEb,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,IAAO,YAAY;AAAA,IAAQ,cAAa;AAAA,KAAI,gBAG/D,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,qBAAD,MACE,oCAAC,sBAAD;AAAA,IACE,aAAY;AAAA,IACZ,MAAK;AAAA,IACL,aAAY;AAAA,MAEd,oCAAC,sBAAD;AAAA,IAAO,QAAM;AAAA,IAAC,MAAK;AAAA,IAAS,cAAc,6BAAM;AAAA,MAChD,oCAAC,uBAAD;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,MAAK;AAAA,IACL,WAAW,WAAW,UAAU;AAAA,KACjC,eAMP,oCAAC,2BAAD;AAAA,IACE,WAAW,EAAE,IAAI,GAAG,IAAI;AAAA,IACxB,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,IAAI;AAAA;AAAA,KAGL,OAAO,IAAI,CAAC,EAAE,MAAM,SACnB,oCAAC,qBAAD;AAAA,IACE,KAAK;AAAA,IACL,cAAa;AAAA,IACb,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,WAAW;AAAA,IACX,GAAG;AAAA,IACH,YAAW;AAAA,IACX,gBAAe;AAAA,KAEf,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,KAAO,OAC1B,oCAAC,uBAAD;AAAA,IAAQ,IAAI;AAAA,IAAM,IAAI,WAAW;AAAA,KAAM;AAAA;;;AGxGnD;AAAA;AAAA;AAAA;AAGO,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,kBAAkB,QAAQ,QAAQ,IAAI,oBAAoB;AAChE,QAAM,QAAQ,gBAAgB,MAAM,KAAK;AACzC,MAAI,UAAU,QAAQ,IAAI,cAAc;AACtC,UAAM,MAAM;AAAA;AAGd,QAAM;AAEN,SAAO;AAAA;;;ACZT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAQO;AAEP,mBAAqB;AACrB,qBAMO;AACP,qBAAkB;AAClB,qBAA0B;;;ACnB1B,qBAaO;AAEP,yBAAwC;AAEjC,mBAAmB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,GAKC;AACD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,EAAE;AAAA,IACT;AAAA,IACA;AAAA,MACE,iCAAS,EAAE,SAAS,QAAQ;AAEhC,SACE,oCAAC,oBAAD;AAAA,IACE,UAAU;AAAA,IACV,UAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,KAEF,CAAC,CAAC,SACD,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,IAAM,SAAS;AAAA,KAC/B,QAGL,oCAAC,+BAAD,MACE,oCAAC,sBAAD;AAAA,IAAO,SAAQ;AAAA,KAAa,kBAC1B,oCAAC,sBAAD,MACG,aAAa,IAAI,CAAC,aAAa,MAC9B,oCAAC,mBAAD,iCAAQ,YAAY,wBAApB;AAAA,IAA2C,KAAK;AAAA,MAC7C,YAAY,QAAQ,IAAI,CAAC,QAAQ,MAChC,oCAAC,mBAAD,iCAAQ,OAAO,mBAAf;AAAA,IAAiC,KAAK;AAAA,MACnC,OAAO,OAAO,gBAMzB,oCAAC,sBAAD,mBAAW,sBACR,KAAK,IAAI,CAAC,KAAU,MAAc;AACjC,eAAW;AACX,WACE,oCAAC,mBAAD,iCAAQ,IAAI,gBAAZ;AAAA,MAA2B,KAAK;AAAA,QAC7B,IAAI,MAAM,IAAI,CAAC,MAAW,MAAc;AACvC,aACE,oCAAC,mBAAD,iCAAQ,KAAK,iBAAb;AAAA,QAA6B,KAAK;AAAA,UAC/B,KAAK,OAAO;AAAA;AAAA,SAU/B,oCAAC,qBAAD;AAAA,IAAM,SAAS;AAAA,IAAG,gBAAe;AAAA,IAAS,YAAY;AAAA,KACpD,oCAAC,uBAAD;AAAA,IAAQ,SAAS;AAAA,IAAc,MAAK;AAAA,KAAK,SAGzC,oCAAC,oBAAD;AAAA,IAAK,SAAS;AAAA,KAAG,WACP,YAAY,GAAE,QAAK,YAE7B,oCAAC,uBAAD;AAAA,IAAQ,SAAS;AAAA,IAAU,MAAK;AAAA,KAAK;AAAA;;;ADlDtC,IAAM,UAAyB,OAAO,EAAE,SAAS,aAAa;AAxCrE;AAyCE,sBAAc,gBAAgB,SAAS;AAAA,IACrC,iBAAiB;AAAA;AAGnB,QAAM,EAAE,OAAO;AAEf,MAAI,CAAC,IAAI;AACP,WAAO;AAAA;AAGT,QAAM,UAAU,MAAM,mBAAmB;AAEzC,QAAM,CAAC,OAAO,cAAc,YAAY,MAAM,QAAQ,IAAI;AAAA,IACxD,gBAAgB,QAAQ,IAAI,CAAC,EAAE,YAA+B;AAAA,IAC9D,sBAAc;AAAA,IACd;AAAA;AAGF,SAAO,uBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA,WAAW,cAAQ,OAAR,mBAAY;AAAA,IACvB;AAAA;AAAA;AAIG,IAAM,UAAyB,OAAO,EAAE,SAAS,aAAa;AACnE,QAAM,EAAE,OAAO;AAEf,MAAI,CAAC,IAAI;AACP,WAAO;AAAA;AAGT,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,QAAS,MAAM,SAAS,IAAI;AAClC,QAAM,YAAa,MAAM,SAAS,IAAI;AACtC,QAAM,QAAS,MAAM,SAAS,IAAI;AAElC,MAAI,OAAO;AACT,UAAM,UAAU,IAAI,OAAO;AAAA,SACtB;AACL,UAAM,aAAa,IAAI;AAAA;AAGzB,SAAO;AAAA;AAGM,iBAAiB;AAC9B,QAAM,EAAE,UAAU,OAAO,cAAc,cACrC;AACF,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,WAAW,4BAAM,OAAO;AAE9B,QAAM,CAAC,WAAW,YAAY,SAAS,aACrC,UACA,CAAC,MAAM,CAAC,SACL,MAAK,UAAU,cAAc,SAAS,EAAE,OAAO,MAAM,kBACpD,KAAK,SAAS,cAAc,SAAS,EAAE,OAAO,MAAM,mBACtD,CAAC,SAAS,KAAK;AAGnB,gCAAU,MAAM;AACd,QAAI,eAAe,WAAW;AAC5B;AAAA;AAAA,KAED,CAAC,YAAY;AAEhB,SACE,oCAAC,eAAD,MACE,oCAAC,wBAAD,MAAU,YACV,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,IACH,cAAa;AAAA,KAEb,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,IAAM,cAAa;AAAA,KAAI,qBAG1C,oCAAC,WAAD;AAAA,IAAW,SAAQ;AAAA,MAClB,WAAW,IAAI,CAAC,SACf,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,IAAO,KAAK,KAAK;AAAA,KAC5B,oCAAC,qBAAD;AAAA,IACE,gBAAe;AAAA,IACf,YAAW;AAAA,IACX,SAAQ;AAAA,KAER,oCAAC,qBAAD,MACG,KAAK,WAAU,KAAE,KAAK,UACvB,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,QAAM;AAAA,IAAC,OAAO,KAAK;AAAA,MACvC,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAM,QAAM;AAAA,IAAC,OAAO;AAAA,MAChC,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAY,QAAM;AAAA,IAAC,OAAO;AAAA,OAExC,oCAAC,uBAAD;AAAA,IACE,WAAW,WAAW,UAAU;AAAA,IAChC,MAAK;AAAA,KACN,gBAOT,oCAAC,WAAD;AAAA,IACE,OAAO,cAAc;AAAA,IACrB,SAAS;AAAA,MACP;AAAA,QACE,QAAQ;AAAA,QACR,MAAM,CAAC,UACL,oCAAC,qBAAD;AAAA,UAAM,YAAY;AAAA,UAAO,YAAY;AAAA,WAClC,8CAAc,YAAW,OACxB,GAAG,MAAM,IAAI,SAAS,aAAa,MAAM,IAAI,SAAS,aAEtD,oCAAC,qBAAD;AAAA,UACE,IAAI,WAAW,6CAAc,WAAW,MAAM,IAAI,SAAS;AAAA,WAE1D,MAAM,IAAI,SAAS,WAAU,KAAE,MAAM,IAAI,SAAS;AAAA;AAAA,MAM7D,EAAE,QAAQ,UAAU,UAAU;AAAA,MAC9B;AAAA,QACE,QAAQ;AAAA,QACR,MAAM,CAAC,UACL,oCAAC,qBAAD;AAAA,UAAM,QAAO;AAAA,WACX,oCAAC,sBAAD;AAAA,UAAO,MAAK;AAAA,UAAQ,QAAM;AAAA,UAAC,OAAO,MAAM,IAAI,SAAS;AAAA,YACrD,oCAAC,uBAAD;AAAA,UACE,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,IAAI;AAAA;AAAA,UAEN,MAAK;AAAA,UACL,WAAW,WAAW,UAAU;AAAA,WACjC;AAAA;AAAA;AAAA,IAOT,MAAM;AAAA;AAAA;;;AE1Ld;AAAA;AAAA;AAAA;AAAA;AAAA,qBAcO;AAEP,mBAAqB;AACrB,qBAAmD;AACnD,uBAAmB;AAKZ,IAAM,UAAyB,OAAO,EAAE,SAAS,cAAc;AACpE,QAAM,QAAQ,QAAQ;AACtB,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,WAAW,SAAS,IAAI;AAC9B,QAAM,aAAa,SAAS,IAAI;AAChC,QAAM,YAAY,SAAS,IAAI;AAC/B,QAAM,WAAW,SAAS,IAAI;AAC9B,QAAM,QAAQ,SAAS,IAAI;AAE3B,MAAI,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO;AAClD,WAAO,uBAAU,EAAE,OAAO;AAAA;AAG5B,MAAI,aAAa,YAAY;AAC3B,WAAO,uBAAU,EAAE,OAAO;AAAA;AAG5B,MACE,wDAAwD,KAAK,cAC7D,OACA;AACA,WAAO,uBAAU;AAAA,MACf,OACE;AAAA;AAAA;AAGN,QAAM,iBAAiB,MAAM,yBAAO,KAAK,UAAU;AAEnD,QAAM,WAAW,MAAM,cAAc;AAAA,IACnC,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,UAAU;AAAA,IACV,QAAQ;AAAA;AAGV,MAAI,CAAC,UAAU;AACb,WAAO,uBAAU;AAAA,MACf,OAAO;AAAA;AAAA;AAIX,QAAM,OAAO,MAAM,oBAAc,aAAa,QAAQ,OAAO;AAAA,IAC3D,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd;AAAA;AAGF,SAAO;AAAA;AAGM,sBAAqB;AAElC,QAAM,aAAa;AACnB,QAAM,EAAE,UAAU,uCAAmB;AAErC,SACE,oCAAC,qBAAD;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,IAAI,sCAAkB,WAAW;AAAA,KAEjC,oCAAC,sBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,MAAM,EAAE,IAAI,MAAM,IAAI;AAAA,IACtB,IAAI;AAAA,IACJ,IAAI;AAAA,KAEJ,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA,OAGxC,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAM,OAAO;AAAA,KAAY,uBAI3C,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,KAEF,gCAAO,YACN,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,MAAM,WAG5B,SACC,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,SAGvB,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAO,YAAU;AAAA,KAC/B,oCAAC,0BAAD,MAAW,WACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAO,MAAK;AAAA,OAE1B,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAW,YAAU;AAAA,KACnC,oCAAC,0BAAD,MAAW,aACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAO,MAAK;AAAA,OAE1B,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAQ,YAAU;AAAA,KAChC,oCAAC,0BAAD,MAAW,UACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,MAAK;AAAA,OAE3B,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAW,YAAU;AAAA,KACnC,oCAAC,0BAAD,MAAW,kBACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAW,MAAK;AAAA,IAAW,UAAQ;AAAA,OAEjD,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,IAAkB,YAAU;AAAA,KAC1C,oCAAC,0BAAD,MAAW,yBACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAW,MAAK;AAAA,OAE9B,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,uBAAD;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,MAAK;AAAA,IACL,WAAW,CAAC,CAAC,WAAW;AAAA,KACzB;AAAA;;;AC1JjB;AAAA;AAAA;AAAA;AAGO,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,oBAAc,OAAO,SAAS,EAAE,YAAY;AAAA;;;ACJpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASO;AAEP,oBAAqB;AACrB,qBAAoC;AACpC,qBAAkB;AAsBX,IAAI,UAAyB,OAAO,EAAE,cAAc;AAnC3D;AAoCE,QAAM,OAAO,oBAAc,gBAAgB,SAAS;AAAA,IAClD,iBAAiB;AAAA;AAGnB,MAAI,CAAC,aAAa,OAAO,cAAc,WAAW,aAChD,MAAM,QAAQ,IAAI;AAAA,IAChB;AAAA,IACA;AAAA,IACA,sBAAc;AAAA,IACd,sBAAc;AAAA,IACd,sBAAc;AAAA;AAGlB,QAAM,CAAC,SAAS,oBAAoB,MAAM,QAAQ,IAAI;AAAA,IACpD,WAAW,6CAAc,IAAI,2CAAa;AAAA,IAC1C,cAAc,uCAAW;AAAA;AAG3B,iBAAe,iCACV,eADU;AAAA,IAEb,aAAa,mBAAa,gBAAb,mBAA0B,KACrC,CAAC,GAAG,MACF,SAAS,EAAE,IAAI,QAAQ,KAAK,OAAO,SAAS,EAAE,IAAI,QAAQ,KAAK;AAAA;AAIrE,QAAM,aAAa;AAAA,IACjB,QAAQ,2DAAmB,OAAnB,mBAAuB;AAAA,IAC/B,MAAM,MAAM,KAAK,CAAC,MAAS;AAhE/B;AAgEkC,sCAAiB,OAAjB,oBAAqB,YAAW,EAAE;AAAA;AAAA;AAGlE,SAAO,wBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIG,IAAM,WAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,oBAAc,OAAO,SAAS,EAAE,YAAY;AAAA;AAGrC,yBAAyB;AAjFxC;AAkFE,QAAM,EAAE,aAAa,cAAc,OAAO,WAAW,SAAS,eAC5D;AACF,QAAM,aAAa,sCAAkB,SAAS;AAC9C,QAAM,EAAE,IAAI,gBAAgB,QAAQ,MAAM,gBAAgB;AAE1D,QAAM,oBAAoB,4BAAM,aAAa;AAC7C,QAAM,WAAY,qCAAS,YAAW,IAAI,OACxC,CAAC,KAAiC,OAAO;AACvC,QAAI,GAAG,MAAM,kBAAkB,GAAG;AAClC,WAAO;AAAA,KAET;AAGF,SACE,oCAAC,eAAD,MACE,oCAAC,2BAAD;AAAA,IACE,WAAW,EAAE,IAAI,GAAG,IAAI;AAAA,IACxB,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,IAAI,UAAU,gBAAgB;AAAA;AAAA,KAG/B,cACC,oCAAC,qBAAD;AAAA,IACE,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,eAAc;AAAA,IACd,gBAAe;AAAA,IACf,YAAW;AAAA,KAEX,oCAAC,wBAAD;AAAA,IAAS,UAAU;AAAA,KAAI,sBACvB,oCAAC,wBAAD;AAAA,IAAS,SAAS;AAAA,IAAM,UAAU;AAAA,KAAI,WAGtC,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAI,YAAW;AAAA,KAC5B,iBAAW,SAAX,mBAAiB,WAAU,KAAE,iBAAW,SAAX,mBAAiB,WAEjD,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAI,YAAW;AAAA,KAC5B,WAAW,QAAO,aAIxB,WACC,oCAAC,yBAAD;AAAA,IACE,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,WAAW;AAAA,IACX,SAAS;AAAA,IACT,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,SAAQ;AAAA,IACR,SAAQ;AAAA,IACR,gBAAe;AAAA,IACf,YAAW;AAAA,KAEX,oCAAC,UAAD;AAAA,IAAU;AAAA,OAGb,aACC,oCAAC,yBAAD;AAAA,IAAU,SAAS;AAAA,IAAG,MAAK;AAAA,KACzB,oCAAC,eAAD;AAAA,IAAe,IAAI,UAAU;AAAA,IAAI,OAAO;AAAA,QAI9C,oCAAC,2BAAD;AAAA,IACE,SAAS,EAAE,IAAI,GAAG,IAAI;AAAA,IACtB,WAAW,EAAE,IAAI,GAAG,IAAI;AAAA,IACxB,SAAQ;AAAA,KAER,oCAAC,WAAD;AAAA,IACE,OACE,oCAAC,qBAAD;AAAA,MAAM,YAAW;AAAA,MAAS,gBAAe;AAAA,OACvC,oCAAC,qBAAD,MAAO,OACP,oCAAC,uBAAD;AAAA,MACE,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,QAAQ;AAAA,QACN,IAAI;AAAA;AAAA,MAEN,IAAI;AAAA,MACJ,IAAI,WAAW,uBAAuB,2CAAa;AAAA,OAElD,WAAW,SAAS,YAAY,SAC7B,qBACA;AAAA,IAIV,SAAS;AAAA,MACP,EAAE,QAAQ,OAAO,UAAU;AAAA,MAC3B;AAAA,QACE,QAAQ;AAAA,QACR,MAAM,CAAC,EAAE,UACP,oCAAC,qBAAD;AAAA,UAAM,YAAY;AAAA,WAChB,oCAAC,uBAAD;AAAA,UAAQ,KAAK,IAAI,SAAS;AAAA,UAAK,MAAK;AAAA,YACpC,oCAAC,qBAAD;AAAA,UAAM,YAAY;AAAA,UAAO,YAAY;AAAA,WAClC,IAAI,SAAS;AAAA;AAAA,MAKtB,EAAE,QAAQ,SAAS,UAAU;AAAA,MAC7B,EAAE,QAAQ,SAAS,UAAU;AAAA;AAAA,IAE/B,MAAM,eAAe;AAAA,MAGvB,oCAAC,WAAD;AAAA,IACE,OAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,QAAQ;AAAA,QACR,MAAM,CAAC,EAAE,UACP,oCAAC,qBAAD;AAAA,UAAM,YAAY;AAAA,UAAO,YAAY;AAAA,WAClC,WAAW,OACV,GAAG,IAAI,SAAS,aAAa,IAAI,SAAS,aAE1C,oCAAC,qBAAD;AAAA,UACE,IAAI,WAAW,uBAAuB,IAAI,SAAS;AAAA,WAElD,IAAI,SAAS,WAAU,KAAE,IAAI,SAAS;AAAA;AAAA,MAMjD,EAAE,QAAQ,UAAU,UAAU;AAAA;AAAA,IAEhC,MAAM;AAAA,OAGV,oCAAC,qBAAD;AAAA,IAAM,WAAU;AAAA,KAAS,eAAY,IAAI,OAAO;AAAA;;;AC1NtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAcO;AAEP,oBAAqB;AACrB,qBAAyD;AAKlD,IAAM,UAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,oBAAc,gBAAgB,SAAS;AAAA,IAC3C,iBAAiB;AAAA;AAGnB,QAAM,UAAU,MAAM,eAAe,WACnC,QAAQ,QAAQ,IAAI;AAEtB,QAAM,QAAQ,QAAQ,IAAI;AAE1B,SAAO,wBAAU,EAAE;AAAA;AAGd,IAAM,WAAyB,OAAO,EAAE,SAAS,cAAc;AAEpE,QAAM,OAAO,MAAM,oBAAc,aAAa,QAAQ,SAAS;AAAA,IAC7D,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd;AAAA;AAGF,SAAO;AAAA;AAGM,sBAAqB;AAElC,QAAM,EAAE,UAAU;AAClB,QAAM,aAAa;AAEnB,SACE,oCAAC,qBAAD;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,IAAI,sCAAkB,WAAW;AAAA,KAEjC,oCAAC,sBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI;AAAA,IACJ,MAAM,EAAE,IAAI,MAAM,IAAI;AAAA,IACtB,IAAI;AAAA,IACJ,IAAI;AAAA,KAEJ,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,sBAAD;AAAA,IAAO,KAAK;AAAA,IAAM,MAAM;AAAA,IAAK,SAAS;AAAA,OAGxC,oCAAC,sBAAD;AAAA,IAAO,OAAO;AAAA,KACZ,oCAAC,qBAAD;AAAA,IAAM,UAAU;AAAA,IAAM,OAAO;AAAA,KAAY,2FAI3C,oCAAC,qBAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,oBAAD;AAAA,IACE,SAAS;AAAA,IACT,IAAI,sCAAkB,SAAS;AAAA,IAC/B,WAAW;AAAA,IACX,GAAG;AAAA,KAEF,gCAAO,YACN,oCAAC,sBAAD;AAAA,IAAO,QAAO;AAAA,IAAQ,SAAQ;AAAA,KAC5B,oCAAC,0BAAD,OACA,oCAAC,iCAAD,MAAmB,MAAM,WAG7B,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,KACd,oCAAC,0BAAD,MAAW,UACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,MAAK;AAAA,OAE3B,oCAAC,4BAAD;AAAA,IAAa,IAAG;AAAA,KACd,oCAAC,0BAAD,MAAW,kBACX,oCAAC,sBAAD;AAAA,IAAO,MAAK;AAAA,IAAW,MAAK;AAAA,OAE9B,oCAAC,sBAAD;AAAA,IAAO,SAAS;AAAA,KACd,oCAAC,sBAAD;AAAA,IACE,WAAW,EAAE,MAAM,UAAU,IAAI;AAAA,IACjC,OAAO;AAAA,IACP,SAAS;AAAA,KAET,oCAAC,qBAAD;AAAA,IAAM,IAAG;AAAA,IAAW,OAAO;AAAA,KAAa,gBAGxC,oCAAC,qBAAD;AAAA,IAAM,IAAG;AAAA,IAAmB,OAAO;AAAA,KAAa,gCAIlD,oCAAC,uBAAD;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,IAAI;AAAA;AAAA,IAEN,MAAK;AAAA,IACL,WAAW,CAAC,CAAC,WAAW;AAAA,KACzB;AAAA;;;ACtHjB,IAAO,0BAAQ,EAAC,WAAU,YAAW,SAAQ,EAAC,UAAS,mCAAkC,WAAU,CAAC,oCAAmC,oCAAmC,uCAAqC,UAAS,EAAC,QAAO,EAAC,MAAK,QAAO,YAAW,QAAU,QAAO,IAAG,SAAQ,QAAU,iBAAgB,QAAU,UAAS,2BAA0B,WAAU,CAAC,qCAAoC,aAAY,OAAM,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,sBAAqB,EAAC,MAAK,sBAAqB,YAAW,QAAO,QAAO,eAAc,SAAQ,QAAU,iBAAgB,QAAU,UAAS,yCAAwC,WAAU,QAAU,aAAY,MAAK,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,yBAAwB,EAAC,MAAK,yBAAwB,YAAW,QAAO,QAAO,kBAAiB,SAAQ,QAAU,iBAAgB,QAAU,UAAS,4CAA2C,WAAU,QAAU,aAAY,MAAK,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,uCAAsC,EAAC,MAAK,uCAAsC,YAAW,QAAO,QAAO,gCAA+B,SAAQ,QAAU,iBAAgB,QAAU,UAAS,0DAAyD,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,uBAAsB,EAAC,MAAK,uBAAsB,YAAW,QAAO,QAAO,UAAS,SAAQ,MAAK,iBAAgB,QAAU,UAAS,0CAAyC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,OAAM,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,0BAAyB,EAAC,MAAK,0BAAyB,YAAW,QAAO,QAAO,mBAAkB,SAAQ,QAAU,iBAAgB,QAAU,UAAS,6CAA4C,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,qBAAoB,EAAC,MAAK,qBAAoB,YAAW,QAAO,QAAO,cAAa,SAAQ,QAAU,iBAAgB,QAAU,UAAS,wCAAuC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,uBAAsB,EAAC,MAAK,uBAAsB,YAAW,QAAO,QAAO,UAAS,SAAQ,MAAK,iBAAgB,QAAU,UAAS,0CAAyC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,QAAU,SAAQ,MAAK,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,SAAQ,SAAQ,QAAU,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,CAAC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,iBAAgB,EAAC,MAAK,iBAAgB,YAAW,QAAO,QAAO,UAAS,SAAQ,QAAU,iBAAgB,QAAU,UAAS,oCAAmC,WAAU,QAAU,aAAY,MAAK,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,yBAAwB,EAAC,MAAK,yBAAwB,YAAW,QAAO,QAAO,kBAAiB,SAAQ,QAAU,iBAAgB,QAAU,UAAS,4CAA2C,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,kBAAiB,EAAC,MAAK,kBAAiB,YAAW,QAAO,QAAO,WAAU,SAAQ,QAAU,iBAAgB,QAAU,UAAS,qCAAoC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,qCAAoC,aAAY,MAAK,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,WAAQ,OAAM;;;ACgB7lL,IAAM,QAAQ,EAAE,QAAQ;AACxB,IAAM,SAAS;AAAA,EACpB,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,uCAAuC;AAAA,IACnC,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,0BAA0B;AAAA,IACtB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,yBAAyB;AAAA,IACrB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,yBAAyB;AAAA,IACrB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,uBAAuB;AAAA,IACnB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,uBAAuB;AAAA,IACnB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,sBAAsB;AAAA,IAClB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,qBAAqB;AAAA,IACjB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,kBAAkB;AAAA,IACd,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
