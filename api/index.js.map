{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "/Users/juancruzleyba/Desktop/golftimeapp/app/root.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/$eventId.tsx", "../app/components/Sidebar.tsx", "../db.ts", "../app/services/auth.server.tsx", "../app/services/session.server.tsx", "../app/services/events.server.tsx", "../app/entities/User.ts", "../app/repositories/table.ts", "../app/services/user.server.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/index.tsx", "../app/components/EventCardItem.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/logout.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/index.tsx", "../app/components/MiniTable.tsx", "/Users/juancruzleyba/Desktop/golftimeapp/app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "// entry.server.tsx\nimport { renderToString } from 'react-dom/server'\nimport { CacheProvider } from '@emotion/react'\nimport createEmotionServer from '@emotion/server/create-instance'\nimport { RemixServer } from '@remix-run/react'\nimport type { EntryContext } from '@remix-run/node' // Depends on the runtime you choose\n\nimport { ServerStyleContext } from './context'\nimport createEmotionCache from './createEmotionCache'\n\nconst AWS = require(\"aws-sdk\");\nAWS.config.update({\n  region: \"us-east-1\",\n  accessKeyId: process.env.DYNAMODB_ACCESS_KEY_ID,\n  secretAccessKey: process.env.DYNAMODB_SECRET_ACCESS_KEY,\n});\nconsole.debug('$$$ PASA')\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  const cache = createEmotionCache()\n  const { extractCriticalToChunks } = createEmotionServer(cache)\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  const chunks = extractCriticalToChunks(html)\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}", "// context.tsx\nimport { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n", "// createEmotionCache.ts\nimport createCache from \"@emotion/cache\";\n\nexport default function createEmotionCache() {\n  return createCache({ key: \"css\" });\n}\n", "// root.tsx\nimport React, { useContext, useEffect } from \"react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport type { MetaFunction, LinksFunction } from \"@remix-run/node\"; // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from \"./context\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Golftime App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport let links: LinksFunction = () => {\n  return [\n    {\n      rel: \"icon\",\n      href: \"/favicon.png\",\n      type: \"image/png\",\n    },\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    { rel: \"preconnect\", href: \"https://fonts.gstaticom\" },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\",\n    },\n  ];\n};\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    return (\n      <html lang=\"en\">\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(\" \")}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  );\n}\n", "import {\n  Avatar,\n  Box,\n  Flex,\n  Heading,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport authenticator from \"~/services/auth.server\";\nimport EventManager from \"~/services/events.server\";\nimport { createUser } from \"~/services/user.server\";\nimport type { Tournament } from \"~/types\";\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  await createUser();\n  const tournamentId = params.eventId;\n  if (!tournamentId) {\n    return null;\n  }\n  return json<Tournament>(await EventManager.fetchEventById(tournamentId));\n};\n\nexport default function SingleEvent() {\n  const tournament: Tournament = useLoaderData();\n  const [course] = Object.keys(tournament.courses);\n  console.debug(\"$$$\", tournament);\n  return (\n    <SimpleSidebar>\n      <Box\n        w={\"full\"}\n        bg={useColorModeValue(\"white\", \"gray.900\")}\n        boxShadow={\"2xl\"}\n        rounded={\"lg\"}\n        p={6}\n      >\n        <Heading marginY={5}>{tournament.name}</Heading>\n        {tournament?.courses[course].nm && (\n          <Heading variant={\"h3\"} fontSize=\"md\" marginY={5}>\n            {tournament?.courses[course].nm}\n          </Heading>\n        )}\n        <TableContainer>\n          <Table variant=\"simple\">\n            <Thead>\n              <Tr>\n                <Th>Posici\u00F3n</Th>\n                <Th>Jugador</Th>\n                <Th>Total</Th>\n                <Th>Score</Th>\n                <Th>Hoyo</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {tournament.competitors\n                ?.sort((a, b) => {\n                  return (\n                    parseInt(a.pos.replace(\"T\", \"\")) -\n                    parseInt(b.pos.replace(\"T\", \"\"))\n                  );\n                })\n                .map((competitor) => (\n                  <Tr key={competitor.id}>\n                    <Td>{competitor.pos}</Td>\n                    <Td>\n                      <Flex alignItems={\"center\"}>\n                        <Avatar src={competitor.img} />\n                        <Text ml=\"2\" fontWeight={\"bold\"}>\n                          {competitor.name}\n                        </Text>\n                      </Flex>\n                    </Td>\n                    <Td>{competitor.toPar}</Td>\n                    <Td>{competitor.today}</Td>\n                    <Td>{competitor.thru}</Td>\n                  </Tr>\n                ))}\n            </Tbody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </SimpleSidebar>\n  );\n}\n", "import type { BoxProps, FlexProps } from \"@chakra-ui/react\";\nimport {\n  Box,\n  Button,\n  CloseButton,\n  Drawer,\n  DrawerContent,\n  Flex,\n  Icon,\n  IconButton,\n  Image,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { Form, Link } from \"@remix-run/react\";\nimport type { ReactNode, ReactText } from \"react\";\nimport React from \"react\";\nimport type { IconType } from \"react-icons\";\nimport { FiMenu } from \"react-icons/fi\";\nimport { IoCalendar, IoHome } from \"react-icons/io5\";\nimport Logo from \"../assets/golftime.svg\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  href: string;\n}\nconst LinkItems: Array<LinkItemProps> = [\n  { name: \"Home\", icon: IoHome, href: \"/\" },\n  { name: \"Events\", icon: IoCalendar, href: \"/events\" },\n];\n\nexport default function SimpleSidebar({ children }: { children: ReactNode }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue(\"gray.100\", \"gray.900\")}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: \"none\", md: \"block\" }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\"\n      >\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav display={{ base: \"flex\", md: \"none\" }} onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}\n\ninterface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\n\nconst SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      w={{ base: \"full\", md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      textAlign={\"center\"}\n      {...rest}\n    >\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Image src={Logo} maxW={175} marginX={5} />\n\n        <CloseButton display={{ base: \"flex\", md: \"none\" }} onClick={onClose} />\n      </Flex>\n\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} href={link.href}>\n          {link.name}\n        </NavItem>\n      ))}\n      <Box m={5}>\n        <Form method=\"post\" action=\"/logout\">\n          <Button type=\"submit\">Cerrar Sesi\u00F3n</Button>\n        </Form>\n      </Box>\n    </Box>\n  );\n};\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  children: ReactText;\n  href: string;\n}\nconst NavItem = ({ icon, children, href, ...rest }: NavItemProps) => {\n  return (\n    <Link to={href} style={{ textDecoration: \"none\" }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: \"green.400\",\n          color: \"white\",\n        }}\n        {...rest}\n      >\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: \"white\",\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </Link>\n  );\n};\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\nconst MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 24 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      justifyContent=\"flex-start\"\n      {...rest}\n    >\n      <IconButton\n        variant=\"outline\"\n        onClick={onOpen}\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n\n      <Image src={Logo} maxW={175} marginX={5} />\n    </Flex>\n  );\n};\n", "import { Pool } from \"pg\";\n\nexport const pool = new Pool({\n  host: process.env.DBHOST, // Postgres ip address or domain name\n  port: 5432, // Postgres server port\n  database: process.env.DBNAME, // Name of database to connect to\n  user: process.env.DBUSER, // Username of database user\n  password: process.env.DBPASS, // Password of database user\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const query = (text: string, params: any[]) => {\n  return pool.query(text, params);\n};\n", "import { query as sql } from \"db\";\nimport { Authenticator, AuthorizationError } from \"remix-auth\";\nimport { FormStrategy } from \"remix-auth-form\";\nimport type { User } from \"./session.server\";\nimport { sessionStorage } from \"./session.server\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\n\n// Create an instance of the authenticator, pass a Type, User,  with what\n// strategies will return and will store in the session\nconst authenticator = new Authenticator<User | Error | null>(sessionStorage, {\n  sessionKey: \"sessionKey\", // keep in sync\n  sessionErrorKey: \"sessionErrorKey\", // keep in sync\n});\n\nauthenticator.use(\n  new FormStrategy(async ({ form }) => {\n    let email = form.get(\"email\") as string;\n    let password = form.get(\"password\") as string;\n\n    if (!email || email?.length === 0)\n      throw new AuthorizationError(\"Bad Credentials: Email is required\");\n    if (typeof email !== \"string\")\n      throw new AuthorizationError(\"Bad Credentials: Email must be a string\");\n\n    if (!password || password?.length === 0)\n      throw new AuthorizationError(\"Bad Credentials: Password is required\");\n    if (typeof password !== \"string\")\n      throw new AuthorizationError(\n        \"Bad Credentials: Password must be a string\"\n      );\n\n    const {\n      rows: { 0: user },\n    } = await sql(`select * from users where email = $1;`, [\n      email.toLocaleLowerCase(),\n    ]);\n\n    if (user) {\n      const passwordMatch = await bcrypt.compare(\n        password.toLocaleLowerCase(),\n        user.password\n      );\n      if (!passwordMatch) {\n        throw new AuthorizationError(\"Usuario o contrase\u00F1a incorrectos\");\n      }\n\n      return {\n        id: user.id,\n        firstName: user.firstname,\n        lastName: user.lastname,\n        email: user.email,\n      };\n    } else {\n      throw new AuthorizationError(\"Usuario o contrase\u00F1a incorrectos\");\n    }\n  })\n);\n\nexport default authenticator;\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"_session\", // use any name you want here\n    sameSite: \"lax\", // this helps with CSRF\n    path: \"/\", // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: [\"s3cr3t\"], // replace this with an actual secret\n    secure: process.env.NODE_ENV === \"production\", // enable this in prod only\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { getSession, commitSession, destroySession } = sessionStorage;\n\n// define the user model\nexport type User = {\n  firstName: string;\n  lastName: string;\n  id: number;\n  email: string;\n  points?: number;\n};\n", "import type { ScheduledEvent, Tournament } from \"~/types\";\n\nimport isThisWeek from \"date-fns/isThisWeek\";\nimport isSameWeek from \"date-fns/isSameWeek\";\nimport isAfter from \"date-fns/isAfter\";\n\n// Singleton to access events\nclass EventManager {\n  events: ScheduledEvent[];\n  constructor() {\n    this.events = [];\n  }\n\n  async getEvents(): Promise<ScheduledEvent[]> {\n    try {\n      if (this.events.length) return this.events;\n\n      const data = await fetch(`${process.env.EVENTS_ENDPOINT}`);\n      console.debug(\"$$$ fetching\");\n      if (!data.ok) {\n        throw Error(\"Failed to fetch current tournament\");\n      }\n\n      const { events }: { events: ScheduledEvent[] } = await data.json();\n\n      this.events = events.reduce((memo: any[], event: any) => {\n        if (event?.link) {\n          const id = event?.link?.split(\"=\")[1];\n          const flag = event?.athlete?.flag?.replace(\n            \".com\",\n            \".com/combiner/i?img=\"\n          );\n\n          memo.push({\n            id,\n            ...event,\n            athlete: {\n              ...event.athlete,\n              flag,\n            },\n            location: event?.locations?.[0]?.venue?.fullName,\n          });\n        }\n\n        return memo;\n      }, []);\n    } catch (e) {\n      console.error(e);\n    }\n\n    return this.events;\n  }\n\n  async getActiveEvent() {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      return eventList?.find(\n        (item: any) =>\n          isThisWeek(new Date(item.startDate), { weekStartsOn: 2 }) &&\n          item.description !== \"Canceled\"\n      );\n    } catch (e) {\n      console.error(e);\n      return e;\n    }\n  }\n\n  async getNextActiveEvent() {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      const event = eventList?.find(\n        (item: any) =>\n          item.status === \"pre\" &&\n          !isThisWeek(new Date(item.startDate), { weekStartsOn: 1 }) &&\n          isAfter(new Date(item.startDate), new Date()) &&\n          item.description !== \"Canceled\"\n      );\n      return event;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getLastActiveEvent() {\n    try {\n      const eventList = await this.getEvents();\n      if (!eventList?.length) return null;\n\n      const index = eventList?.findIndex((item: any) => item.status !== \"post\");\n      const current = eventList[index - 1];\n      const secondary = eventList[index - 2];\n      let match = false;\n      if (current && secondary) {\n        match = isSameWeek(\n          new Date(current.startDate),\n          new Date(secondary.startDate)\n        );\n      }\n\n      if (match) {\n        return current.isMaj ? current : secondary;\n      }\n\n      return current;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  fetchEventById: (id: string) => Promise<Tournament> = async (id) => {\n    const data = await fetch(`${process.env.LEADERBOARD_ENDPOINT}${id}`);\n\n    if (!data.ok) {\n      throw Error(\"Failed to fetch tournament\");\n    }\n\n    const { leaderboard } = await data.json();\n\n    return leaderboard as Tournament;\n  };\n\n  fetchCurrentEvent: () => Promise<Tournament> = async () => {\n    const data = await fetch(`${process.env.LEADERBOARD_ENDPOINT}`);\n\n    if (!data.ok) {\n      throw Error(\"Failed to fetch current tournament\");\n    }\n\n    const { leaderboard } = await data.json();\n\n    return leaderboard as Tournament;\n  };\n}\n\nexport default new EventManager();\n", "import { Entity } from \"dynamodb-toolbox\";\nimport { MonoTable } from \"~/repositories/table\";\n\nexport const UserEntity = new Entity({\n  name: \"User\",\n  attributes: {\n    id: { partitionKey: true }, // flag as partitionKey\n    sk: { sortKey: true }, // flag as sortKey and mark hidden\n    firstName: { type: \"string\" }, // map 'name' to table attribute 'data'\n    lastName: { type: \"string\" }, // alias table attribute 'co' to 'company'\n    email: { type: \"string\" }, // set the attribute type\n    points: { type: \"number\" },\n    lastUpdatedEvent: { type: \"string\" },\n    password: { type: \"string\" },\n    verified: { type: \"boolean\" },\n    createdAt: { type: \"string\" },\n    token: { type: \"string\" },\n  },\n\n  // Assign it to our table\n  table: MonoTable,\n});\n", "import { Table } from \"dynamodb-toolbox\";\n\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nconst DocumentClient = new DynamoDB.DocumentClient();\n\n// Instantiate a table\nexport const MonoTable = new Table({\n  // Specify table name (used by DynamoDB)\n  name: \"golftime\",\n\n  // Define partition and sort keys\n  partitionKey: \"pk\",\n  sortKey: \"sk\",\n\n  // Add the DocumentClient\n  DocumentClient,\n  indexes: {\n    \"sk-points-index\": { partitionKey: \"sk\", sortKey: \"points\" },\n  },\n});\n", "import { UserEntity } from \"../entities/User\";\nimport { BetEntity } from \"../entities/Bet\";\nimport { query as sql } from \"db\";\nimport chunk from \"lodash.chunk\";\nimport type { User } from \"./session.server\";\n\nexport const listUsers = async () => {\n  const time = Date.now();\n\n  const { Items } = await UserEntity.query(\"User#Current\", {\n    reverse: true,\n    index: \"sk-points-index\",\n  });\n\n  console.debug(\"$$$\", (Date.now() - time) / 1000, \"s\");\n  return Items.map(({ firstName, lastName, points }: User) => ({\n    firstName,\n    lastName,\n    points: points?.toFixed(2),\n  }));\n};\n\nexport const createUser = async () => {\n  /*  const { rows, rowCount } = await sql(`select * from bets`, []);\n\n  const chunks = chunk(rows, 20);\n\n  for (let chunkIndex in chunks) {\n    const block = chunks[chunkIndex];\n\n    console.log(\n      `Block Number: ${chunkIndex} of ${chunks.length}. Block size: ${block.length}`\n    );\n    let promiseArray: Promise<any>[] = [];\n\n    for (const blockIndex in block) {\n      const item = block[blockIndex];\n\n      promiseArray.push(\n        BetEntity.put({\n          id: item.eventid,\n          sk: item.userid,\n          result: parseFloat(item.result),\n          season: item.season,\n          createdAt: item.created_on.toString(),\n          players: item.players.map((pl: any) => ({\n            id: pl,\n            img:\n              \"https://a.espncdn.com/i/headshots/golf/players/full/\" +\n              pl +\n              \".png\",\n            name: \"\",\n          })),\n        })\n      );\n    }\n    await Promise.all(promiseArray);\n  } */\n  /* const resp = await BetEntity.scan({\n    filters: [\n      {\n        attr: \"season\",\n        eq: 2022,\n      },\n    ],\n  });\n\n  let map: Record<string, number> = {};\n  resp.Items.forEach((bet: any) => {\n    map[bet.sk] = (map[bet.sk] || 0) + parseFloat(bet?.result || 0);\n  });\n\n  let promiseArray: Promise<any>[] = [];\n\n  Object.keys(map).forEach((key) => {\n    promiseArray.push(\n      UserEntity.update({ pk: key, sk: \"User#Current\", points: map[key] })\n    );\n  });\n\n  await Promise.all(promiseArray);\n\n  console.debug(\"$$$\", map); */\n};\n", "import { Box } from \"@chakra-ui/react\";\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport EventCardItem from \"~/components/EventCardItem\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport authenticator from \"~/services/auth.server\";\nimport EventsManager from \"~/services/events.server\";\nimport type { ScheduledEvent } from \"~/types\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  return json<ScheduledEvent[]>(await EventsManager.getEvents());\n};\n\nexport default function Events() {\n  const events: ScheduledEvent[] = useLoaderData();\n\n  return (\n    <SimpleSidebar>\n      <Box>\n        {events.map((event) => (\n          <EventCardItem\n            id={event.link?.split(\"=\")?.[1]}\n            key={event.link?.split(\"=\")?.[1] || event.name}\n            event={event}\n          ></EventCardItem>\n        ))}\n      </Box>\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Badge,\n  Box,\n  Button,\n  Center,\n  Heading,\n  Image,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { Link } from \"@remix-run/react\";\nimport type { ScheduledEvent } from \"~/types\";\n\nexport default function EventCardItem({\n  event,\n  id,\n}: {\n  event: ScheduledEvent;\n  id: string;\n}) {\n  const badgeBg = useColorModeValue(\"gray.50\", \"gray.800\");\n\n  return (\n    <Center py={2}>\n      <Box\n        maxW={\"640px\"}\n        w={\"full\"}\n        bg={useColorModeValue(\"white\", \"gray.900\")}\n        boxShadow={\"2xl\"}\n        rounded={\"lg\"}\n        p={6}\n        textAlign={\"center\"}\n      >\n        <Heading fontSize={\"2xl\"} fontFamily={\"body\"}>\n          {event.name}\n        </Heading>\n        <Text\n          textAlign={\"center\"}\n          color={useColorModeValue(\"gray.700\", \"gray.400\")}\n          px={3}\n        >\n          {event.locations[0]?.venue.fullName}\n        </Text>\n\n        <Stack align={\"center\"} justify={\"center\"} direction={\"row\"} mt={6}>\n          <Image src={event.athlete.flag} maxW=\"10\" />\n          <Text>{event.athlete.name}</Text>\n          {event.purse && (\n            <Badge fontSize=\"md\" px={4} py={1} bg={badgeBg} fontWeight={\"400\"}>\n              {event.purse}\n            </Badge>\n          )}\n        </Stack>\n\n        <Stack mt={8} direction={\"row\"} spacing={4}>\n          <Button\n            flex={1}\n            fontSize={\"sm\"}\n            rounded={\"full\"}\n            bg={\"green.400\"}\n            color={\"white\"}\n            boxShadow={\n              \"0px 1px 25px -5px rgb(66 153 225 / 48%), 0 10px 10px -5px rgb(66 153 225 / 43%)\"\n            }\n            _hover={{\n              bg: \"green.500\",\n            }}\n            _focus={{\n              bg: \"green.500\",\n            }}\n            as={Link}\n            to={`/events/${id}`}\n          >\n            Leaderboard\n          </Button>\n        </Stack>\n      </Box>\n    </Center>\n  );\n}\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport authenticator from \"~/services/auth.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: \"/login\" });\n};\n", "import { Avatar, Box, Flex, Text } from \"@chakra-ui/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { MiniTable } from \"~/components/MiniTable\";\nimport SimpleSidebar from \"~/components/Sidebar\";\nimport authenticator from \"~/services/auth.server\";\nimport EventsManager from \"~/services/events.server\";\nimport type { User } from \"~/services/session.server\";\nimport { listUsers } from \"~/services/user.server\";\nimport type { Tournament } from \"~/types\";\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  const auth = authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n\n  const [, currentEvent, users] = await Promise.all([\n    auth,\n    EventsManager.fetchCurrentEvent(),\n    listUsers(),\n  ]);\n\n  return json<{ currentEvent: Tournament | null; users: User[] }>({\n    currentEvent,\n    users,\n  });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: \"/login\" });\n};\n\nexport default function DashboardPage() {\n  const { currentEvent, users } = useLoaderData<{\n    currentEvent: Tournament;\n    users: User[];\n  }>();\n\n  return (\n    <SimpleSidebar>\n      <Flex justifyContent={\"space-between\"}>\n        <Box>\n          <MiniTable\n            title=\"Leaderboard\"\n            columns={[\n              { Header: \"Pos\", accessor: \"pos\" },\n              {\n                Header: \"Player\",\n                Cell: (props) => (\n                  <Flex alignItems={\"center\"}>\n                    <Avatar src={props.row.original.img} size=\"sm\" />\n                    <Text fontWeight={\"600\"} marginLeft={2}>\n                      {props.row.original.name}\n                    </Text>\n                  </Flex>\n                ),\n              },\n              { Header: \"Total\", accessor: \"toPar\" },\n              { Header: \"Score\", accessor: \"thru\" },\n            ]}\n            data={currentEvent?.competitors || []}\n          />\n        </Box>\n        <Box>\n          <MiniTable\n            title=\"Posiciones\"\n            columns={[\n              {\n                Header: \"Usuario\",\n                Cell: (props) => (\n                  <Text fontWeight={\"600\"} marginLeft={2}>\n                    {props.row.original.firstName} {props.row.original.lastName}\n                  </Text>\n                ),\n              },\n              { Header: \"Puntos\", accessor: \"points\" },\n            ]}\n            data={users}\n          />\n        </Box>\n      </Flex>\n    </SimpleSidebar>\n  );\n}\n", "import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport type { Column } from \"react-table\";\nimport { usePagination, useTable } from \"react-table\";\n\nexport function MiniTable({\n  title,\n  columns,\n  data,\n}: {\n  title?: string;\n  columns: Column<any>[];\n  data: any[];\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    pageCount,\n    state: { pageIndex },\n    nextPage,\n    previousPage,\n  } = useTable({ columns, data }, usePagination);\n\n  return (\n    <Box\n      w={\"full\"}\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      boxShadow={\"2xl\"}\n      rounded={\"lg\"}\n      p={6}\n      textAlign={\"center\"}\n    >\n      {!!title && (\n        <Heading fontSize={\"lg\"} marginY={5}>\n          {title}\n        </Heading>\n      )}\n      <Table {...getTableProps()}>\n        <Thead>\n          {headerGroups.map((headerGroup, i) => (\n            <Tr {...headerGroup.getHeaderGroupProps()} key={i}>\n              {headerGroup.headers.map((column, j) => (\n                <Th {...column.getHeaderProps()} key={j}>\n                  {column.render(\"Header\")}\n                </Th>\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {page.map((row: any, i: number) => {\n            prepareRow(row);\n            return (\n              <Tr {...row.getRowProps()} key={i}>\n                {row.cells.map((cell: any, j: number) => {\n                  return (\n                    <Td {...cell.getCellProps()} key={j}>\n                      {cell.render(\"Cell\")}\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n      <Flex marginY={5} justifyContent=\"center\" alignItems={\"center\"}>\n        <Button onClick={previousPage} size=\"sm\">\n          Prev\n        </Button>\n        <Box marginX={5}>\n          Pagina {pageIndex + 1} de {pageCount}\n        </Box>\n        <Button onClick={nextPage} size=\"sm\">\n          Prox\n        </Button>\n      </Flex>\n    </Box>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useTransition } from \"@remix-run/react\";\nimport authenticator from \"~/services/auth.server\";\nimport { sessionStorage } from \"~/services/session.server\";\n\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Checkbox,\n  Stack,\n  Link,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n  Alert,\n  AlertIcon,\n  AlertDescription,\n} from \"@chakra-ui/react\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: \"/\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n  const error = session.get(\"sessionErrorKey\");\n\n  return json<any>({ error });\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  // call my authenticator\n  const resp = await authenticator.authenticate(\"form\", request, {\n    successRedirect: \"/\",\n    failureRedirect: \"/login\",\n    throwOnError: true,\n    context,\n  });\n\n  return resp;\n};\n\nexport default function LoginPage() {\n  // if i got an error it will come back with the loader data\n  const { error } = useLoaderData();\n  const transition = useTransition();\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\n        <Stack align={\"center\"}>\n          <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            to enjoy all of our cool <Link color={\"blue.400\"}>features</Link> \u270C\uFE0F\n          </Text>\n        </Stack>\n        <Form method=\"post\">\n          <Box\n            rounded={\"lg\"}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            boxShadow={\"lg\"}\n            p={8}\n          >\n            {error?.message && (\n              <Alert status=\"error\">\n                <AlertIcon />\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email address</FormLabel>\n                <Input type=\"email\" name=\"email\" />\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Password</FormLabel>\n                <Input type=\"password\" name=\"password\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: \"column\", sm: \"row\" }}\n                  align={\"start\"}\n                  justify={\"space-between\"}\n                >\n                  <Checkbox>Remember me</Checkbox>\n                  <Link color={\"blue.400\"}>Forgot password?</Link>\n                </Stack>\n                <Button\n                  bg={\"blue.400\"}\n                  color={\"white\"}\n                  _hover={{\n                    bg: \"blue.500\",\n                  }}\n                  type=\"submit\"\n                  isLoading={!!transition.submission}\n                >\n                  Sign in\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Form>\n      </Stack>\n    </Flex>\n  );\n}\n", "export default {'version':'90b978b8','entry':{'module':'/build/entry.client-Y54U3QPK.js','imports':['/build/_shared/chunk-XCR2CEVR.js','/build/_shared/chunk-YOBUPFER.js','/build/_shared/chunk-26IXESQJ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-ZHQ52J6V.js','imports':['/build/_shared/chunk-SPN6AIFE.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/events/$eventId':{'id':'routes/events/$eventId','parentId':'root','path':'events/:eventId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/events/$eventId-NS2PUONN.js','imports':['/build/_shared/chunk-FL3NUB4P.js','/build/_shared/chunk-CFHXONGY.js','/build/_shared/chunk-FH7EFROX.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/events/index':{'id':'routes/events/index','parentId':'root','path':'events','index':true,'caseSensitive':undefined,'module':'/build/routes/events/index-RCSLKSNE.js','imports':['/build/_shared/chunk-CFHXONGY.js','/build/_shared/chunk-FH7EFROX.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-QC3EIS4R.js','imports':['/build/_shared/chunk-FL3NUB4P.js','/build/_shared/chunk-CFHXONGY.js','/build/_shared/chunk-FH7EFROX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-TW33P6GP.js','imports':['/build/_shared/chunk-FH7EFROX.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-LQHQZTKA.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-90B978B8.js'};", "\nimport * as entryServer from \"/Users/juancruzleyba/Desktop/golftimeapp/app/entry.server.tsx\";\nimport * as route0 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/root.tsx\";\nimport * as route1 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/$eventId.tsx\";\nimport * as route2 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/events/index.tsx\";\nimport * as route3 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/logout.tsx\";\nimport * as route4 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/index.tsx\";\nimport * as route5 from \"/Users/juancruzleyba/Desktop/golftimeapp/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/events/$eventId\": {\n      id: \"routes/events/$eventId\",\n      parentId: \"root\",\n      path: \"events/:eventId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/events/index\": {\n      id: \"routes/events/index\",\n      parentId: \"root\",\n      path: \"events\",\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };"],
  "mappings": "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",
  "names": []
}
